module("Box3"),test("constructor",function(){var e=new THREE.Box3;ok(e.min.equals(posInf3),"Passed!"),ok(e.max.equals(negInf3),"Passed!"),e=new THREE.Box3(zero3.clone(),zero3.clone()),ok(e.min.equals(zero3),"Passed!"),ok(e.max.equals(zero3),"Passed!"),e=new THREE.Box3(zero3.clone(),one3.clone()),ok(e.min.equals(zero3),"Passed!"),ok(e.max.equals(one3),"Passed!")}),test("copy",function(){var e=new THREE.Box3(zero3.clone(),one3.clone()),o=(new THREE.Box3).copy(e);ok(o.min.equals(zero3),"Passed!"),ok(o.max.equals(one3),"Passed!"),e.min=zero3,e.max=one3,ok(o.min.equals(zero3),"Passed!"),ok(o.max.equals(one3),"Passed!")}),test("set",function(){var e=new THREE.Box3;e.set(zero3,one3),ok(e.min.equals(zero3),"Passed!"),ok(e.max.equals(one3),"Passed!")}),test("setFromPoints",function(){var e=new THREE.Box3;e.setFromPoints([zero3,one3,two3]),ok(e.min.equals(zero3),"Passed!"),ok(e.max.equals(two3),"Passed!"),e.setFromPoints([one3]),ok(e.min.equals(one3),"Passed!"),ok(e.max.equals(one3),"Passed!"),e.setFromPoints([]),ok(e.isEmpty(),"Passed!")}),test("empty/makeEmpty",function(){var e=new THREE.Box3;ok(e.isEmpty(),"Passed!");var e=new THREE.Box3(zero3.clone(),one3.clone());ok(!e.isEmpty(),"Passed!"),e.makeEmpty(),ok(e.isEmpty(),"Passed!")}),test("getCenter",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());ok(e.getCenter().equals(zero3),"Passed!"),e=new THREE.Box3(zero3.clone(),one3.clone());var o=one3.clone().multiplyScalar(.5);ok(e.getCenter().equals(o),"Passed!")}),test("getSize",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());ok(e.getSize().equals(zero3),"Passed!"),e=new THREE.Box3(zero3.clone(),one3.clone()),ok(e.getSize().equals(one3),"Passed!")}),test("expandByPoint",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());e.expandByPoint(zero3),ok(e.getSize().equals(zero3),"Passed!"),e.expandByPoint(one3),ok(e.getSize().equals(one3),"Passed!"),e.expandByPoint(one3.clone().negate()),ok(e.getSize().equals(one3.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero3),"Passed!")}),test("expandByVector",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());e.expandByVector(zero3),ok(e.getSize().equals(zero3),"Passed!"),e.expandByVector(one3),ok(e.getSize().equals(one3.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero3),"Passed!")}),test("expandByScalar",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());e.expandByScalar(0),ok(e.getSize().equals(zero3),"Passed!"),e.expandByScalar(1),ok(e.getSize().equals(one3.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero3),"Passed!")}),test("containsPoint",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone());ok(e.containsPoint(zero3),"Passed!"),ok(!e.containsPoint(one3),"Passed!"),e.expandByScalar(1),ok(e.containsPoint(zero3),"Passed!"),ok(e.containsPoint(one3),"Passed!"),ok(e.containsPoint(one3.clone().negate()),"Passed!")}),test("containsBox",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.containsBox(e),"Passed!"),ok(!e.containsBox(o),"Passed!"),ok(!e.containsBox(n),"Passed!"),ok(o.containsBox(e),"Passed!"),ok(n.containsBox(e),"Passed!"),ok(!o.containsBox(n),"Passed!")}),test("getParameter",function(){var e=new THREE.Box3(zero3.clone(),one3.clone()),o=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.getParameter(new THREE.Vector3(0,0,0)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(e.getParameter(new THREE.Vector3(1,1,1)).equals(new THREE.Vector3(1,1,1)),"Passed!"),ok(o.getParameter(new THREE.Vector3(-1,-1,-1)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(o.getParameter(new THREE.Vector3(0,0,0)).equals(new THREE.Vector3(.5,.5,.5)),"Passed!"),ok(o.getParameter(new THREE.Vector3(1,1,1)).equals(new THREE.Vector3(1,1,1)),"Passed!")}),test("clampPoint",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.clampPoint(new THREE.Vector3(0,0,0)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(e.clampPoint(new THREE.Vector3(1,1,1)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(e.clampPoint(new THREE.Vector3(-1,-1,-1)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(o.clampPoint(new THREE.Vector3(2,2,2)).equals(new THREE.Vector3(1,1,1)),"Passed!"),ok(o.clampPoint(new THREE.Vector3(1,1,1)).equals(new THREE.Vector3(1,1,1)),"Passed!"),ok(o.clampPoint(new THREE.Vector3(0,0,0)).equals(new THREE.Vector3(0,0,0)),"Passed!"),ok(o.clampPoint(new THREE.Vector3(-1,-1,-1)).equals(new THREE.Vector3(-1,-1,-1)),"Passed!"),ok(o.clampPoint(new THREE.Vector3(-2,-2,-2)).equals(new THREE.Vector3(-1,-1,-1)),"Passed!")}),test("distanceToPoint",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(one3.clone().negate(),one3.clone());ok(0==e.distanceToPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(e.distanceToPoint(new THREE.Vector3(1,1,1))==Math.sqrt(3),"Passed!"),ok(e.distanceToPoint(new THREE.Vector3(-1,-1,-1))==Math.sqrt(3),"Passed!"),ok(o.distanceToPoint(new THREE.Vector3(2,2,2))==Math.sqrt(3),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(1,1,1)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(-1,-1,-1)),"Passed!"),ok(o.distanceToPoint(new THREE.Vector3(-2,-2,-2))==Math.sqrt(3),"Passed!")}),test("distanceToPoint",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(one3.clone().negate(),one3.clone());ok(0==e.distanceToPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(e.distanceToPoint(new THREE.Vector3(1,1,1))==Math.sqrt(3),"Passed!"),ok(e.distanceToPoint(new THREE.Vector3(-1,-1,-1))==Math.sqrt(3),"Passed!"),ok(o.distanceToPoint(new THREE.Vector3(2,2,2))==Math.sqrt(3),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(1,1,1)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector3(-1,-1,-1)),"Passed!"),ok(o.distanceToPoint(new THREE.Vector3(-2,-2,-2))==Math.sqrt(3),"Passed!")}),test("intersectsBox",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.intersectsBox(e),"Passed!"),ok(e.intersectsBox(o),"Passed!"),ok(e.intersectsBox(n),"Passed!"),ok(o.intersectsBox(e),"Passed!"),ok(n.intersectsBox(e),"Passed!"),ok(o.intersectsBox(n),"Passed!"),o.translate(new THREE.Vector3(2,2,2)),ok(!e.intersectsBox(o),"Passed!"),ok(!o.intersectsBox(e),"Passed!"),ok(!o.intersectsBox(n),"Passed!")}),test("intersectsSphere",function(){var e=new THREE.Box3(zero3.clone(),one3.clone()),o=new THREE.Sphere(zero3.clone(),1);ok(e.intersectsSphere(o),"Passed!"),o.translate(new THREE.Vector3(2,2,2)),ok(!e.intersectsSphere(o),"Passed!")}),test("intersectsPlane",function(){var e=new THREE.Box3(zero3.clone(),one3.clone()),o=new THREE.Plane(new THREE.Vector3(0,1,0),1),n=new THREE.Plane(new THREE.Vector3(0,1,0),1.25),s=new THREE.Plane(new THREE.Vector3(0,-1,0),1.25);ok(e.intersectsPlane(o),"Passed!"),ok(!e.intersectsPlane(n),"Passed!"),ok(!e.intersectsPlane(s),"Passed!")}),test("getBoundingSphere",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.getBoundingSphere().equals(new THREE.Sphere(zero3,0)),"Passed!"),ok(o.getBoundingSphere().equals(new THREE.Sphere(one3.clone().multiplyScalar(.5),.5*Math.sqrt(3))),"Passed!"),ok(n.getBoundingSphere().equals(new THREE.Sphere(zero3,.5*Math.sqrt(12))),"Passed!")}),test("intersect",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.clone().intersect(e).equals(e),"Passed!"),ok(e.clone().intersect(o).equals(e),"Passed!"),ok(o.clone().intersect(o).equals(o),"Passed!"),ok(e.clone().intersect(n).equals(e),"Passed!"),ok(o.clone().intersect(n).equals(o),"Passed!"),ok(n.clone().intersect(n).equals(n),"Passed!")}),test("union",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone());ok(e.clone().union(e).equals(e),"Passed!"),ok(e.clone().union(o).equals(o),"Passed!"),ok(e.clone().union(n).equals(n),"Passed!"),ok(o.clone().union(n).equals(n),"Passed!")});var compareBox=function(e,o,n){return n=n||1e-4,e.min.distanceTo(o.min)<n&&e.max.distanceTo(o.max)<n};test("applyMatrix4",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=new THREE.Box3(one3.clone().negate(),one3.clone()),s=new THREE.Box3(one3.clone().negate(),zero3.clone()),t=(new THREE.Matrix4).makeTranslation(1,-2,1),a=new THREE.Vector3(1,-2,1);ok(compareBox(e.clone().applyMatrix4(t),e.clone().translate(a)),"Passed!"),ok(compareBox(o.clone().applyMatrix4(t),o.clone().translate(a)),"Passed!"),ok(compareBox(n.clone().applyMatrix4(t),n.clone().translate(a)),"Passed!"),ok(compareBox(s.clone().applyMatrix4(t),s.clone().translate(a)),"Passed!")}),test("translate",function(){var e=new THREE.Box3(zero3.clone(),zero3.clone()),o=new THREE.Box3(zero3.clone(),one3.clone()),n=(new THREE.Box3(one3.clone().negate(),one3.clone()),new THREE.Box3(one3.clone().negate(),zero3.clone()));ok(e.clone().translate(one3).equals(new THREE.Box3(one3,one3)),"Passed!"),ok(e.clone().translate(one3).translate(one3.clone().negate()).equals(e),"Passed!"),ok(n.clone().translate(one3).equals(o),"Passed!"),ok(o.clone().translate(one3.clone().negate()).equals(n),"Passed!")});