module("Vector3"),test("constructor",function(){var e=new THREE.Vector3;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),e=new THREE.Vector3(x,y,z),ok(e.x===x,"Passed!"),ok(e.y===y,"Passed!"),ok(e.z===z,"Passed!")}),test("copy",function(){var e=new THREE.Vector3(x,y,z),s=(new THREE.Vector3).copy(e);ok(s.x==x,"Passed!"),ok(s.y==y,"Passed!"),ok(s.z==z,"Passed!"),e.x=0,e.y=-1,e.z=-2,ok(s.x==x,"Passed!"),ok(s.y==y,"Passed!"),ok(s.z==z,"Passed!")}),test("set",function(){var e=new THREE.Vector3;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),e.set(x,y,z),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!"),ok(e.z==z,"Passed!")}),test("setX,setY,setZ",function(){var e=new THREE.Vector3;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),e.setX(x),e.setY(y),e.setZ(z),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!"),ok(e.z==z,"Passed!")}),test("setComponent,getComponent",function(){var e=new THREE.Vector3;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),e.setComponent(0,1),e.setComponent(1,2),e.setComponent(2,3),ok(1==e.getComponent(0),"Passed!"),ok(2==e.getComponent(1),"Passed!"),ok(3==e.getComponent(2),"Passed!")}),test("add",function(){var e=new THREE.Vector3(x,y,z),s=new THREE.Vector3(-x,-y,-z);e.add(s),ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!");var o=(new THREE.Vector3).addVectors(s,s);ok(o.x==-2*x,"Passed!"),ok(o.y==-2*y,"Passed!"),ok(o.z==-2*z,"Passed!")}),test("sub",function(){var e=new THREE.Vector3(x,y,z),s=new THREE.Vector3(-x,-y,-z);e.sub(s),ok(e.x==2*x,"Passed!"),ok(e.y==2*y,"Passed!"),ok(e.z==2*z,"Passed!");var o=(new THREE.Vector3).subVectors(e,e);ok(0==o.x,"Passed!"),ok(0==o.y,"Passed!"),ok(0==o.z,"Passed!")}),test("multiply/divide",function(){var e=new THREE.Vector3(x,y,z),s=new THREE.Vector3(-x,-y,-z);e.multiplyScalar(-2),ok(e.x==x*-2,"Passed!"),ok(e.y==y*-2,"Passed!"),ok(e.z==z*-2,"Passed!"),s.multiplyScalar(-2),ok(s.x==2*x,"Passed!"),ok(s.y==2*y,"Passed!"),ok(s.z==2*z,"Passed!"),e.divideScalar(-2),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!"),ok(e.z==z,"Passed!"),s.divideScalar(-2),ok(s.x==-x,"Passed!"),ok(s.y==-y,"Passed!"),ok(s.z==-z,"Passed!")}),test("min/max/clamp",function(){var e=new THREE.Vector3(x,y,z),s=new THREE.Vector3(-x,-y,-z),o=new THREE.Vector3;o.copy(e).min(s),ok(o.x==-x,"Passed!"),ok(o.y==-y,"Passed!"),ok(o.z==-z,"Passed!"),o.copy(e).max(s),ok(o.x==x,"Passed!"),ok(o.y==y,"Passed!"),ok(o.z==z,"Passed!"),o.set(-2*x,2*y,-2*z),o.clamp(s,e),ok(o.x==-x,"Passed!"),ok(o.y==y,"Passed!"),ok(o.z==-z,"Passed!")}),test("negate",function(){var e=new THREE.Vector3(x,y,z);e.negate(),ok(e.x==-x,"Passed!"),ok(e.y==-y,"Passed!"),ok(e.z==-z,"Passed!")}),test("dot",function(){var e=new THREE.Vector3(x,y,z),s=new THREE.Vector3(-x,-y,-z),o=new THREE.Vector3,t=e.dot(s);ok(t==-x*x-y*y-z*z,"Passed!"),t=e.dot(o),ok(0==t,"Passed!")}),test("length/lengthSq",function(){var e=new THREE.Vector3(x,0,0),s=new THREE.Vector3(0,-y,0),o=new THREE.Vector3(0,0,z),t=new THREE.Vector3;ok(e.length()==x,"Passed!"),ok(e.lengthSq()==x*x,"Passed!"),ok(s.length()==y,"Passed!"),ok(s.lengthSq()==y*y,"Passed!"),ok(o.length()==z,"Passed!"),ok(o.lengthSq()==z*z,"Passed!"),ok(0==t.length(),"Passed!"),ok(0==t.lengthSq(),"Passed!"),e.set(x,y,z),ok(e.length()==Math.sqrt(x*x+y*y+z*z),"Passed!"),ok(e.lengthSq()==x*x+y*y+z*z,"Passed!")}),test("normalize",function(){var e=new THREE.Vector3(x,0,0),s=new THREE.Vector3(0,-y,0),o=new THREE.Vector3(0,0,z);e.normalize(),ok(1==e.length(),"Passed!"),ok(1==e.x,"Passed!"),s.normalize(),ok(1==s.length(),"Passed!"),ok(s.y==-1,"Passed!"),o.normalize(),ok(1==o.length(),"Passed!"),ok(1==o.z,"Passed!")}),test("distanceTo/distanceToSquared",function(){var e=new THREE.Vector3(x,0,0),s=new THREE.Vector3(0,-y,0),o=new THREE.Vector3(0,0,z),t=new THREE.Vector3;ok(e.distanceTo(t)==x,"Passed!"),ok(e.distanceToSquared(t)==x*x,"Passed!"),ok(s.distanceTo(t)==y,"Passed!"),ok(s.distanceToSquared(t)==y*y,"Passed!"),ok(o.distanceTo(t)==z,"Passed!"),ok(o.distanceToSquared(t)==z*z,"Passed!")}),test("setLength",function(){var e=new THREE.Vector3(x,0,0);ok(e.length()==x,"Passed!"),e.setLength(y),ok(e.length()==y,"Passed!"),e=new THREE.Vector3(0,0,0),ok(0==e.length(),"Passed!"),e.setLength(y),ok(0==e.length(),"Passed!")}),test("projectOnVector",function(){var e=new THREE.Vector3(1,0,0),s=new THREE.Vector3,o=new THREE.Vector3(10,0,0);ok(s.copy(e).projectOnVector(o).equals(new THREE.Vector3(1,0,0)),"Passed!"),e.set(0,1,0),ok(s.copy(e).projectOnVector(o).equals(new THREE.Vector3(0,0,0)),"Passed!"),e.set(0,0,-1),ok(s.copy(e).projectOnVector(o).equals(new THREE.Vector3(0,0,0)),"Passed!"),e.set(-1,0,0),ok(s.copy(e).projectOnVector(o).equals(new THREE.Vector3(-1,0,0)),"Passed!")}),test("projectOnPlane",function(){var e=new THREE.Vector3(1,0,0),s=new THREE.Vector3,o=new THREE.Vector3(1,0,0);ok(s.copy(e).projectOnPlane(o).equals(new THREE.Vector3(0,0,0)),"Passed!"),e.set(0,1,0),ok(s.copy(e).projectOnPlane(o).equals(new THREE.Vector3(0,1,0)),"Passed!"),e.set(0,0,-1),ok(s.copy(e).projectOnPlane(o).equals(new THREE.Vector3(0,0,-1)),"Passed!"),e.set(-1,0,0),ok(s.copy(e).projectOnPlane(o).equals(new THREE.Vector3(0,0,0)),"Passed!")}),test("reflect",function(){var e=new THREE.Vector3,s=new THREE.Vector3(0,1,0),o=new THREE.Vector3;e.set(0,-1,0),ok(o.copy(e).reflect(s).equals(new THREE.Vector3(0,1,0)),"Passed!"),e.set(1,-1,0),ok(o.copy(e).reflect(s).equals(new THREE.Vector3(1,1,0)),"Passed!"),e.set(1,-1,0),s.set(0,-1,0),ok(o.copy(e).reflect(s).equals(new THREE.Vector3(1,1,0)),"Passed!")}),test("angleTo",function(){var e=new THREE.Vector3(0,-.18851655680720186,.9820700116639124),s=new THREE.Vector3(0,.18851655680720186,-.9820700116639124);equal(e.angleTo(e),0),equal(e.angleTo(s),Math.PI);var o=new THREE.Vector3(1,0,0),t=new THREE.Vector3(0,1,0),a=new THREE.Vector3(0,0,1);equal(o.angleTo(t),Math.PI/2),equal(o.angleTo(a),Math.PI/2),equal(a.angleTo(o),Math.PI/2),ok(Math.abs(o.angleTo(new THREE.Vector3(1,1,0))-Math.PI/4)<1e-7)}),test("lerp/clone",function(){var e=new THREE.Vector3(x,0,z),s=new THREE.Vector3(0,-y,0);ok(e.lerp(e,0).equals(e.lerp(e,.5)),"Passed!"),ok(e.lerp(e,0).equals(e.lerp(e,1)),"Passed!"),ok(e.clone().lerp(s,0).equals(e),"Passed!"),ok(e.clone().lerp(s,.5).x==.5*x,"Passed!"),ok(e.clone().lerp(s,.5).y==.5*-y,"Passed!"),ok(e.clone().lerp(s,.5).z==.5*z,"Passed!"),ok(e.clone().lerp(s,1).equals(s),"Passed!")}),test("equals",function(){var e=new THREE.Vector3(x,0,z),s=new THREE.Vector3(0,-y,0);ok(e.x!=s.x,"Passed!"),ok(e.y!=s.y,"Passed!"),ok(e.z!=s.z,"Passed!"),ok(!e.equals(s),"Passed!"),ok(!s.equals(e),"Passed!"),e.copy(s),ok(e.x==s.x,"Passed!"),ok(e.y==s.y,"Passed!"),ok(e.z==s.z,"Passed!"),ok(e.equals(s),"Passed!"),ok(s.equals(e),"Passed!")});