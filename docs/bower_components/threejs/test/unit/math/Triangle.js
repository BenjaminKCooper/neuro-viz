module("Triangle"),test("constructor",function(){var e=new THREE.Triangle;ok(e.a.equals(zero3),"Passed!"),ok(e.b.equals(zero3),"Passed!"),ok(e.c.equals(zero3),"Passed!"),e=new THREE.Triangle(one3.clone().negate(),one3.clone(),two3.clone()),ok(e.a.equals(one3.clone().negate()),"Passed!"),ok(e.b.equals(one3),"Passed!"),ok(e.c.equals(two3),"Passed!")}),test("copy",function(){var e=new THREE.Triangle(one3.clone().negate(),one3.clone(),two3.clone()),o=(new THREE.Triangle).copy(e);ok(o.a.equals(one3.clone().negate()),"Passed!"),ok(o.b.equals(one3),"Passed!"),ok(o.c.equals(two3),"Passed!"),e.a=one3,e.b=zero3,e.c=zero3,ok(o.a.equals(one3.clone().negate()),"Passed!"),ok(o.b.equals(one3),"Passed!"),ok(o.c.equals(two3),"Passed!")}),test("setFromPointsAndIndices",function(){var e=new THREE.Triangle,o=[one3,one3.clone().negate(),two3];e.setFromPointsAndIndices(o,1,0,2),ok(e.a.equals(one3.clone().negate()),"Passed!"),ok(e.b.equals(one3),"Passed!"),ok(e.c.equals(two3),"Passed!")}),test("set",function(){var e=new THREE.Triangle;e.set(one3.clone().negate(),one3,two3),ok(e.a.equals(one3.clone().negate()),"Passed!"),ok(e.b.equals(one3),"Passed!"),ok(e.c.equals(two3),"Passed!")}),test("area",function(){var e=new THREE.Triangle;ok(0==e.area(),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(.5==e.area(),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(2==e.area(),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(3,0,0)),ok(0==e.area(),"Passed!")}),test("midpoint",function(){var e=new THREE.Triangle;ok(e.midpoint().equals(new THREE.Vector3(0,0,0)),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(e.midpoint().equals(new THREE.Vector3(1/3,1/3,0)),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(e.midpoint().equals(new THREE.Vector3(2/3,0,2/3)),"Passed!")}),test("normal",function(){var e=new THREE.Triangle;ok(e.normal().equals(new THREE.Vector3(0,0,0)),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(e.normal().equals(new THREE.Vector3(0,0,1)),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(e.normal().equals(new THREE.Vector3(0,1,0)),"Passed!")}),test("plane",function(){var e=new THREE.Triangle;ok(0==e.plane().distanceToPoint(e.a),"Passed!"),ok(0==e.plane().distanceToPoint(e.b),"Passed!"),ok(0==e.plane().distanceToPoint(e.c),"Passed!"),ok(e.plane().normal.equals(e.normal()),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(0==e.plane().distanceToPoint(e.a),"Passed!"),ok(0==e.plane().distanceToPoint(e.b),"Passed!"),ok(0==e.plane().distanceToPoint(e.c),"Passed!"),ok(e.plane().normal.equals(e.normal()),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(0==e.plane().distanceToPoint(e.a),"Passed!"),ok(0==e.plane().distanceToPoint(e.b),"Passed!"),ok(0==e.plane().distanceToPoint(e.c),"Passed!"),ok(e.plane().normal.clone().normalize().equals(e.normal()),"Passed!")}),test("barycoordFromPoint",function(){var e=new THREE.Triangle,o=new THREE.Vector3(-2,-1,-1);ok(e.barycoordFromPoint(e.a).equals(o),"Passed!"),ok(e.barycoordFromPoint(e.b).equals(o),"Passed!"),ok(e.barycoordFromPoint(e.c).equals(o),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(e.barycoordFromPoint(e.a).equals(new THREE.Vector3(1,0,0)),"Passed!"),ok(e.barycoordFromPoint(e.b).equals(new THREE.Vector3(0,1,0)),"Passed!"),ok(e.barycoordFromPoint(e.c).equals(new THREE.Vector3(0,0,1)),"Passed!"),ok(e.barycoordFromPoint(e.midpoint()).distanceTo(new THREE.Vector3(1/3,1/3,1/3))<1e-4,"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(e.barycoordFromPoint(e.a).equals(new THREE.Vector3(1,0,0)),"Passed!"),ok(e.barycoordFromPoint(e.b).equals(new THREE.Vector3(0,1,0)),"Passed!"),ok(e.barycoordFromPoint(e.c).equals(new THREE.Vector3(0,0,1)),"Passed!"),ok(e.barycoordFromPoint(e.midpoint()).distanceTo(new THREE.Vector3(1/3,1/3,1/3))<1e-4,"Passed!")}),test("containsPoint",function(){var e=new THREE.Triangle;ok(!e.containsPoint(e.a),"Passed!"),ok(!e.containsPoint(e.b),"Passed!"),ok(!e.containsPoint(e.c),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),ok(e.containsPoint(e.a),"Passed!"),ok(e.containsPoint(e.b),"Passed!"),ok(e.containsPoint(e.c),"Passed!"),ok(e.containsPoint(e.midpoint()),"Passed!"),ok(!e.containsPoint(new THREE.Vector3(-1,-1,-1)),"Passed!"),e=new THREE.Triangle(new THREE.Vector3(2,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,2)),ok(e.containsPoint(e.a),"Passed!"),ok(e.containsPoint(e.b),"Passed!"),ok(e.containsPoint(e.c),"Passed!"),ok(e.containsPoint(e.midpoint()),"Passed!"),ok(!e.containsPoint(new THREE.Vector3(-1,-1,-1)),"Passed!")}),test("closestPointToPoint",function(){var e=new THREE.Triangle(new THREE.Vector3(-1,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0)),o=e.closestPointToPoint(new THREE.Vector3(0,.5,0));ok(o.equals(new THREE.Vector3(0,.5,0)),"Passed!"),o=e.closestPointToPoint(e.a),ok(o.equals(e.a),"Passed!"),o=e.closestPointToPoint(e.b),ok(o.equals(e.b),"Passed!"),o=e.closestPointToPoint(e.c),ok(o.equals(e.c),"Passed!"),o=e.closestPointToPoint(zero3.clone()),ok(o.equals(zero3.clone()),"Passed!"),o=e.closestPointToPoint(new THREE.Vector3(-2,0,0)),ok(o.equals(new THREE.Vector3(-1,0,0)),"Passed!"),o=e.closestPointToPoint(new THREE.Vector3(2,0,0)),ok(o.equals(new THREE.Vector3(1,0,0)),"Passed!"),o=e.closestPointToPoint(new THREE.Vector3(0,2,0)),ok(o.equals(new THREE.Vector3(0,1,0)),"Passed!"),o=e.closestPointToPoint(new THREE.Vector3(0,-2,0)),ok(o.equals(new THREE.Vector3(0,0,0)),"Passed!")});