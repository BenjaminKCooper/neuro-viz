module("Frustum");var unit3=new THREE.Vector3(1,0,0),planeEquals=function(e,n,s){return s=s||1e-4,!(e.normal.distanceTo(n.normal)>s)&&!(Math.abs(e.constant-n.constant)>s)};test("constructor",function(){var e=new THREE.Frustum;ok(void 0!==e.planes,"Passed!"),ok(6===e.planes.length,"Passed!");for(var n=new THREE.Plane,s=0;s<6;s++)ok(e.planes[s].equals(n),"Passed!");var t=new THREE.Plane(unit3,-1),o=new THREE.Plane(unit3,1),a=new THREE.Plane(unit3,2),E=new THREE.Plane(unit3,3),r=new THREE.Plane(unit3,4),i=new THREE.Plane(unit3,5);e=new THREE.Frustum(t,o,a,E,r,i),ok(e.planes[0].equals(t),"Passed!"),ok(e.planes[1].equals(o),"Passed!"),ok(e.planes[2].equals(a),"Passed!"),ok(e.planes[3].equals(E),"Passed!"),ok(e.planes[4].equals(r),"Passed!"),ok(e.planes[5].equals(i),"Passed!")}),test("copy",function(){var e=new THREE.Plane(unit3,-1),n=new THREE.Plane(unit3,1),s=new THREE.Plane(unit3,2),t=new THREE.Plane(unit3,3),o=new THREE.Plane(unit3,4),a=new THREE.Plane(unit3,5),E=new THREE.Frustum(e,n,s,t,o,a),r=(new THREE.Frustum).copy(E);ok(r.planes[0].equals(e),"Passed!"),ok(r.planes[1].equals(n),"Passed!"),ok(r.planes[2].equals(s),"Passed!"),ok(r.planes[3].equals(t),"Passed!"),ok(r.planes[4].equals(o),"Passed!"),ok(r.planes[5].equals(a),"Passed!"),E.planes[0]=n,ok(r.planes[0].equals(e),"Passed!")}),test("setFromMatrix/makeOrthographic/containsPoint",function(){var e=(new THREE.Matrix4).makeOrthographic(-1,1,-1,1,1,100),n=(new THREE.Frustum).setFromMatrix(e);ok(!n.containsPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-50)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(-1,-1,-1.001)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(-1.1,-1.1,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(1,1,-1.001)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(1.1,1.1,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-100)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(-1,-1,-100)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(-1.1,-1.1,-100.1)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(1,1,-100)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(1.1,1.1,-100.1)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(0,0,-101)),"Passed!")}),test("setFromMatrix/makeFrustum/containsPoint",function(){var e=(new THREE.Matrix4).makeFrustum(-1,1,-1,1,1,100),n=(new THREE.Frustum).setFromMatrix(e);ok(!n.containsPoint(new THREE.Vector3(0,0,0)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-50)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(-1,-1,-1.001)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(-1.1,-1.1,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(1,1,-1.001)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(1.1,1.1,-1.001)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(0,0,-99.999)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(-99.999,-99.999,-99.999)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(-100.1,-100.1,-100.1)),"Passed!"),ok(n.containsPoint(new THREE.Vector3(99.999,99.999,-99.999)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(100.1,100.1,-100.1)),"Passed!"),ok(!n.containsPoint(new THREE.Vector3(0,0,-101)),"Passed!")}),test("setFromMatrix/makeFrustum/intersectsSphere",function(){var e=(new THREE.Matrix4).makeFrustum(-1,1,-1,1,1,100),n=(new THREE.Frustum).setFromMatrix(e);ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,0),0)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,0),.9)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,0),1.1)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,-50),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,-1.001),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-1,-1,-1.001),0)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-1.1,-1.1,-1.001),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-1.1,-1.1,-1.001),.5)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(1,1,-1.001),0)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(1.1,1.1,-1.001),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(1.1,1.1,-1.001),.5)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,-99.999),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-99.999,-99.999,-99.999),0)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-100.1,-100.1,-100.1),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(-100.1,-100.1,-100.1),.5)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(99.999,99.999,-99.999),0)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(100.1,100.1,-100.1),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(100.1,100.1,-100.1),.2)),"Passed!"),ok(!n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,-101),0)),"Passed!"),ok(n.intersectsSphere(new THREE.Sphere(new THREE.Vector3(0,0,-101),1.1)),"Passed!")}),test("clone",function(){var e=new THREE.Plane(unit3,-1),n=new THREE.Plane(unit3,1),s=new THREE.Plane(unit3,2),t=new THREE.Plane(unit3,3),o=new THREE.Plane(unit3,4),a=new THREE.Plane(unit3,5),E=new THREE.Frustum(e,n,s,t,o,a),r=E.clone();ok(r.planes[0].equals(e),"Passed!"),ok(r.planes[1].equals(n),"Passed!"),ok(r.planes[2].equals(s),"Passed!"),ok(r.planes[3].equals(t),"Passed!"),ok(r.planes[4].equals(o),"Passed!"),ok(r.planes[5].equals(a),"Passed!"),r.planes[0].copy(n),ok(E.planes[0].equals(e),"Passed!")});