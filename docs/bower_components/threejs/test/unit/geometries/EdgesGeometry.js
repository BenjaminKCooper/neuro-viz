function testEdges(e,t,r){for(var n=createGeometries(e,t),o=0;o<n.length;o++){var s=n[o],a=t.length;equal(countEdges(s),a,"Edges before!");var i=new THREE.EdgesGeometry(s);equal(countEdges(i),r,"Edges after!"),output(s,i)}}function createGeometries(e,t){var r=createIndexedBufferGeometry(e,t),n=(new THREE.Geometry).fromBufferGeometry(r),o=(new THREE.BufferGeometry).fromGeometry(n),s=addDrawCalls(r.clone());return[n,o,r,s]}function createIndexedBufferGeometry(e,t){for(var r=new THREE.BufferGeometry,n=[],o=t.length/3,s=0,a=new Uint32Array(3*o),i=new Float32Array(3*e.length),E=0;E<o;E++)for(var c=0;c<3;c++){var d=t[3*E+c];if(void 0===n[d]){var u=e[d];i[3*s]=u.x,i[3*s+1]=u.y,i[3*s+2]=u.z,n[d]=s,s++}a[3*E+c]=n[d]}return i=i.subarray(0,3*s),r.setIndex(new THREE.BufferAttribute(a,1)),r.addAttribute("position",new THREE.BufferAttribute(i,3)),r.computeFaceNormals(),r}function addDrawCalls(e){for(var t=e.index.count/3,r=0;r<t;r++){var n=3*r,o=3;e.addGroup(n,o)}return e}function countEdges(e){if(e instanceof THREE.EdgesGeometry)return e.getAttribute("position").count/2;if(void 0!==e.faces)return 3*e.faces.length;var t=e.index;return t?t.count:e.getAttribute("position").count}function output(e,t){if(DEBUG===!0){renderer||initDebug();var r=new THREE.Mesh(e,void 0),n=new THREE.LineSegments(t,new THREE.LineBasicMaterial({color:"black"}));r.position.setX(xoffset),n.position.setX(xoffset++),scene.add(r),scene.add(n),scene.children.length%8===0&&(xoffset+=2)}}function initDebug(){function e(){requestAnimationFrame(e),n.update(),renderer.render(scene,camera)}renderer=new THREE.WebGLRenderer({antialias:!0});var t=600,r=480;renderer.setSize(t,r),renderer.setClearColor(13421772),camera=new THREE.PerspectiveCamera(45,t/r,1,100),camera.position.x=30,camera.position.z=40,camera.lookAt(new THREE.Vector3(30,0,0)),document.body.appendChild(renderer.domElement);var n=new THREE.OrbitControls(camera,renderer.domElement);n.target=new THREE.Vector3(30,0,0),e()}module("EdgesGeometry");var DEBUG=!1,vertList=[new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(1,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(1,1,1)];test("singularity",function(){testEdges(vertList,[1,1,1],0)}),test("needle",function(){testEdges(vertList,[0,0,1],0)}),test("single triangle",function(){testEdges(vertList,[0,1,2],3)}),test("two isolated triangles",function(){var e=[new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(1,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(1,0,1),new THREE.Vector3(1,1,1)];testEdges(e,[0,1,2,3,4,5],6)}),test("two flat triangles",function(){testEdges(vertList,[0,1,2,0,2,3],4)}),test("two flat triangles, inverted",function(){testEdges(vertList,[0,1,2,0,3,2],5)}),test("two non-coplanar triangles",function(){testEdges(vertList,[0,1,2,0,4,2],5)}),test("three triangles, coplanar first",function(){testEdges(vertList,[0,1,2,0,2,3,0,4,2],7)}),test("three triangles, coplanar last",function(){testEdges(vertList,[0,1,2,0,4,2,0,2,3],6)}),test("tetrahedron",function(){testEdges(vertList,[0,1,2,0,1,4,0,4,2,1,2,4],6)});var renderer,camera,scene=new THREE.Scene,xoffset=0;