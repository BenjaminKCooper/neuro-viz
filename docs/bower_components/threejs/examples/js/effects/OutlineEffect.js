THREE.OutlineEffect=function(e,i){function a(e){var i,a,t=k[e.type];e.outlineParameters;if(void 0!==t){var r=THREE.ShaderLib[t];i=r.uniforms,a=r.vertexShader}else{if(e.isShaderMaterial!==!0)return M;i=e.uniforms,a=e.vertexShader}var o=Object.assign({},i,T),l=a.replace(/void\s+main\s*\(\s*\)/,S+"\nvoid main()").replace(/\}\s*$/,E+"\n}").replace(/#include\s+<[\w_]*light[\w_]*>/g,""),n=new THREE.ShaderMaterial({uniforms:o,vertexShader:l,fragmentShader:A,side:THREE.BackSide,skinning:!1,morphTargets:!1,morphNormals:!1,fog:!1});return n}function t(e){for(var i=[],t=0,r=e.materials.length;t<r;t++)i.push(a(e.materials[t]));return new THREE.MultiMaterial(i)}function r(e){if(void 0!==e.material){var i=h[e.material.uuid];void 0===i&&(i={material:e.material.isMultiMaterial===!0?t(e.material):a(e.material),used:!0,keepAlive:m,count:0},h[e.material.uuid]=i);var r=i.material;i.used=!0;var o=r!==M?r.uuid:e.uuid;if(g[o]=e.material,e.material.isMultiMaterial===!0){for(var n=0,d=e.material.materials.length;n<d;n++)r.materials[n]!==M&&(g[r.materials[n].uuid]=e.material.materials[n]);u(r,e.material)}else s(r,e.material);e.material=r,b[e.uuid]=e.onBeforeRender,e.onBeforeRender=l}}function o(e){if(void 0!==e.material){var i=g[e.material.uuid];void 0===i&&(i=g[e.uuid],void 0===i)||(e.material=i,e.onBeforeRender=b[e.uuid])}}function l(e,i,a,t,r,o){if(r!==M&&r.isMultiMaterial!==!0){var l=g[r.uuid];void 0!==l&&n(r,l)}}function n(e,i){var a=i.outlineParameters;e.uniforms.outlineAlpha.value=i.opacity,void 0!==a&&(void 0!==a.thickness&&(e.uniforms.outlineThickness.value=a.thickness),void 0!==a.color&&e.uniforms.outlineColor.value.copy(a.color),void 0!==a.alpha&&(e.uniforms.outlineAlpha.value=a.alpha))}function s(e,i){if(e!==M){var a=i.outlineParameters;e.skinning=i.skinning,e.morphTargets=i.morphTargets,e.morphNormals=i.morphNormals,e.fog=i.fog,void 0!==a?(i.visible===!1?e.visible=!1:e.visible=void 0===a.visible||a.visible,e.transparent=void 0!==a.alpha&&a.alpha<1||i.transparent,void 0!==a.keepAlive&&void 0!==h[i.uuid]&&(h[i.uuid].keepAlive=a.keepAlive)):(e.transparent=i.transparent,e.visible=i.visible),i.wireframe!==!0&&i.depthTest!==!1||(e.visible=!1)}}function u(e,i){if(e!==M){var a=i.outlineParameters;void 0!==a?(i.visible===!1?e.visible=!1:e.visible=void 0===a.visible||a.visible,void 0!==a.keepAlive&&(h[i.uuid].keepAlive=a.keepAlive)):e.visible=i.visible;for(var t=0,r=e.materials.length;t<r;t++)s(e.materials[t],i.materials[t])}}function d(){var e;e=Object.keys(g);for(var i=0,a=e.length;i<a;i++)g[e[i]]=void 0;e=Object.keys(b);for(var i=0,a=e.length;i<a;i++)b[e[i]]=void 0;e=Object.keys(h);for(var i=0,a=e.length;i<a;i++){var t=e[i];h[t].used===!1?(h[t].count++,h[t].keepAlive===!1&&h[t].count>p&&delete h[t]):(h[t].used=!1,h[t].count=0)}}i=i||{},this.enabled=!0;var v=void 0!==i.defaultThickness?i.defaultThickness:.003,c=void 0!==i.defaultColor?i.defaultColor:new THREE.Color(0),f=void 0!==i.defaultAlpha?i.defaultAlpha:1,m=void 0!==i.defaultKeepAlive&&i.defaultKeepAlive,h={},p=60,g={},b={},M=new THREE.ShaderMaterial({visible:!1}),k={MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical"},T={outlineThickness:{type:"f",value:v},outlineColor:{type:"c",value:c},outlineAlpha:{type:"f",value:f}},S=["uniform float outlineThickness;","vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {","\tfloat thickness = outlineThickness;","\tfloat ratio = 1.0;","\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );","\tvec4 norm = normalize( pos - pos2 );","\treturn pos + norm * thickness * pos.w * ratio;","}"].join("\n"),E=["#if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( PHYSICAL )","\t#ifndef USE_ENVMAP","\t\tvec3 objectNormal = normalize( normal );","\t\t#ifdef FLIP_SIDED","\t\t\tobjectNormal = -objectNormal;","\t\t#endif","\t#endif","#endif","#ifdef USE_SKINNING","\tgl_Position = calculateOutline( gl_Position, objectNormal, skinned );","#else","\tgl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );","#endif"].join("\n"),A=["#include <common>","#include <fog_pars_fragment>","uniform vec3 outlineColor;","uniform float outlineAlpha;","void main() {","\tgl_FragColor = vec4( outlineColor, outlineAlpha );","\t#include <fog_fragment>","}"].join("\n");this.render=function(i,a,t,l){if(this.enabled===!1)return void e.render(i,a,t,l);var n=e.autoClear;e.autoClear=this.autoClear,e.render(i,a,t,l);var s=i.autoUpdate,u=i.background,v=e.shadowMap.enabled;i.autoUpdate=!1,i.background=null,e.autoClear=!1,e.shadowMap.enabled=!1,i.traverse(r),e.render(i,a,t),i.traverse(o),d(),i.autoUpdate=s,i.background=u,e.autoClear=n,e.shadowMap.enabled=v},this.autoClear=e.autoClear,this.domElement=e.domElement,this.shadowMap=e.shadowMap,this.clear=function(i,a,t){e.clear(i,a,t)},this.getPixelRatio=function(){return e.getPixelRatio()},this.setPixelRatio=function(i){e.setPixelRatio(i)},this.getSize=function(){return e.getSize()},this.setSize=function(i,a,t){e.setSize(i,a,t)},this.setViewport=function(i,a,t,r){e.setViewport(i,a,t,r)},this.setScissor=function(i,a,t,r){e.setScissor(i,a,t,r)},this.setScissorTest=function(i){e.setScissorTest(i)},this.setRenderTarget=function(i){e.setRenderTarget(i)}};