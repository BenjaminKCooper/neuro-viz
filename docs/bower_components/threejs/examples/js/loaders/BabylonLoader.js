THREE.BabylonLoader=function(r){this.manager=void 0!==r?r:THREE.DefaultLoadingManager},THREE.BabylonLoader.prototype={constructor:THREE.BabylonLoader,load:function(r,e,a,t){var n=this,o=new THREE.FileLoader(n.manager);o.load(r,function(r){e(n.parse(JSON.parse(r)))},a,t)},parse:function(r){var e=this.parseMaterials(r),a=this.parseObjects(r,e);return a},parseMaterials:function(r){for(var e={},a=0,t=r.materials.length;a<t;a++){var n=r.materials[a],o=new THREE.MeshPhongMaterial;o.name=n.name,o.color.fromArray(n.diffuse),o.emissive.fromArray(n.emissive),o.specular.fromArray(n.specular),o.shininess=n.specularPower,o.opacity=n.alpha,e[n.id]=o}if(r.multiMaterials)for(var a=0,t=r.multiMaterials.length;a<t;a++){var n=r.multiMaterials[a];console.warn("THREE.BabylonLoader: Multi materials not yet supported."),e[n.id]=new THREE.MeshPhongMaterial}return e},parseGeometry:function(r){var e=new THREE.BufferGeometry,a=new Uint16Array(r.indices);e.setIndex(new THREE.BufferAttribute(a,1));for(var t=new Float32Array(r.positions),n=2,o=t.length;n<o;n+=3)t[n]=-t[n];if(e.addAttribute("position",new THREE.BufferAttribute(t,3)),r.normals){for(var i=new Float32Array(r.normals),n=2,o=i.length;n<o;n+=3)i[n]=-i[n];e.addAttribute("normal",new THREE.BufferAttribute(i,3))}if(r.uvs){var s=new Float32Array(r.uvs);e.addAttribute("uv",new THREE.BufferAttribute(s,2))}var l=r.subMeshes;if(l)for(var n=0,o=l.length;n<o;n++){var u=l[n];e.addGroup(u.indexStart,u.indexCount)}return e},parseObjects:function(r,e){for(var a={},t=new THREE.Scene,n=r.cameras,o=0,i=n.length;o<i;o++){var s=n[o],l=new THREE.PerspectiveCamera(s.fov/Math.PI*180,1.33,s.minZ,s.maxZ);l.name=s.name,l.position.fromArray(s.position),s.rotation&&l.rotation.fromArray(s.rotation),a[s.id]=l}for(var u=r.lights,o=0,i=u.length;o<i;o++){var f,s=u[o];switch(s.type){case 0:f=new THREE.PointLight;break;case 1:f=new THREE.DirectionalLight;break;case 2:f=new THREE.SpotLight;break;case 3:f=new THREE.HemisphereLight}f.name=s.name,s.position&&f.position.set(s.position[0],s.position[1],-s.position[2]),f.color.fromArray(s.diffuse),s.groundColor&&f.groundColor.fromArray(s.groundColor),s.intensity&&(f.intensity=s.intensity),a[s.id]=f,t.add(f)}for(var d=r.meshes,o=0,i=d.length;o<i;o++){var E,s=d[o];if(s.indices){var m=this.parseGeometry(s);E=new THREE.Mesh(m,e[s.materialId])}else E=new THREE.Group;E.name=s.name,E.position.set(s.position[0],s.position[1],-s.position[2]),E.rotation.fromArray(s.rotation),s.rotationQuaternion&&E.quaternion.fromArray(s.rotationQuaternion),E.scale.fromArray(s.scaling),s.parentId?a[s.parentId].add(E):t.add(E),a[s.id]=E}return t}};