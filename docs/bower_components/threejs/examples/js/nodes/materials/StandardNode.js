THREE.StandardNode=function(){THREE.GLNode.call(this),this.color=new THREE.ColorNode(15658734),this.roughness=new THREE.FloatNode(.5),this.metalness=new THREE.FloatNode(.5)},THREE.StandardNode.prototype=Object.create(THREE.GLNode.prototype),THREE.StandardNode.prototype.constructor=THREE.StandardNode,THREE.StandardNode.prototype.build=function(e){var t,r=e.material;if(r.define("PHYSICAL"),this.clearCoat||this.clearCoatRoughness||r.define("STANDARD"),r.define("ALPHATEST","0.0"),r.requestAttribs.light=!0,r.extensions.shaderTextureLOD=!0,e.isShader("vertex")){var i=this.transform?this.transform.parseAndBuildCode(e,"v3",{cache:"transform"}):void 0;r.mergeUniform(THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights])),r.addVertexPars(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex].join("\n"));var s=[THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex];i&&s.push(i.code,"transformed = "+i.result+";"),s.push(THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex),t=s.join("\n")}else{var a={bias:new THREE.RoughnessToBlinnExponentNode,offsetU:0,offsetV:0},o=!r.isDefined("STANDARD");this.color.parse(e,{slot:"color"}),this.roughness.parse(e),this.metalness.parse(e),this.alpha&&this.alpha.parse(e),this.normal&&this.normal.parse(e),this.normalScale&&this.normal&&this.normalScale.parse(e),this.clearCoat&&this.clearCoat.parse(e),this.clearCoatRoughness&&this.clearCoatRoughness.parse(e),this.reflectivity&&this.reflectivity.parse(e),this.light&&this.light.parse(e,{cache:"light"}),this.ao&&this.ao.parse(e),this.ambient&&this.ambient.parse(e),this.shadow&&this.shadow.parse(e),this.emissive&&this.emissive.parse(e,{slot:"emissive"}),this.environment&&this.environment.parse(e,{cache:"env",requires:a,slot:"environment"});var h=this.color.buildCode(e,"c",{slot:"color"}),l=this.roughness.buildCode(e,"fv1"),n=this.metalness.buildCode(e,"fv1"),d=this.alpha?this.alpha.buildCode(e,"fv1"):void 0,u=this.normal?this.normal.buildCode(e,"v3"):void 0,c=this.normalScale&&this.normal?this.normalScale.buildCode(e,"v2"):void 0,f=this.clearCoat?this.clearCoat.buildCode(e,"fv1"):void 0,E=this.clearCoatRoughness?this.clearCoatRoughness.buildCode(e,"fv1"):void 0,m=this.reflectivity?this.reflectivity.buildCode(e,"fv1"):void 0,p=this.light?this.light.buildCode(e,"v3",{cache:"light"}):void 0,v=this.ao?this.ao.buildCode(e,"fv1"):void 0,C=this.ambient?this.ambient.buildCode(e,"c"):void 0,g=this.shadow?this.shadow.buildCode(e,"c"):void 0,R=this.emissive?this.emissive.buildCode(e,"c",{slot:"emissive"}):void 0,T=this.environment?this.environment.buildCode(e,"c",{cache:"env",requires:a,slot:"environment"}):void 0,S=o&&T?this.environment.buildCode(e,"c",{cache:"clearCoat",requires:a,slot:"environment"}):void 0;r.requestAttribs.transparent=void 0!=d,r.addFragmentPars(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.bsdfs,THREE.ShaderChunk.lights_pars,THREE.ShaderChunk.lights_physical_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment].join("\n"));var s=[THREE.ShaderChunk.normal_flip,THREE.ShaderChunk.normal_fragment,"\tPhysicalMaterial material;","\tmaterial.diffuseColor = vec3( 1.0 );",h.code,"\tvec3 diffuseColor = "+h.result+";","\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",THREE.ShaderChunk.logdepthbuf_fragment,l.code,"\tfloat roughnessFactor = "+l.result+";",n.code,"\tfloat metalnessFactor = "+n.result+";"];d&&s.push(d.code,"if ( "+d.result+" <= ALPHATEST ) discard;"),u&&(e.include("perturbNormal2Arb"),s.push(u.code),c&&s.push(c.code),s.push("normal = perturbNormal2Arb(-vViewPosition,normal,"+u.result+","+(new THREE.UVNode).build(e,"v2")+","+(c?c.result:"vec2( 1.0 )")+");")),s.push("material.diffuseColor = "+(p?"vec3( 1.0 )":"diffuseColor * (1.0 - metalnessFactor)")+";"),s.push("material.specularRoughness = clamp( roughnessFactor, DEFAULT_SPECULAR_COEFFICIENT, 1.0 );"),f?s.push(f.code,"material.clearCoat = saturate( "+f.result+" );"):o&&s.push("material.clearCoat = 0.0;"),E?s.push(E.code,"material.clearCoatRoughness = clamp( "+E.result+", DEFAULT_SPECULAR_COEFFICIENT, 1.0 );"):o&&s.push("material.clearCoatRoughness = 0.0;"),m?s.push(m.code,"material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( "+m.result+" ) ), diffuseColor, metalnessFactor );"):s.push("material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );"),s.push(THREE.ShaderChunk.lights_template),p&&(s.push(p.code,"reflectedLight.directDiffuse = "+p.result+";"),s.push("diffuseColor *= 1.0 - metalnessFactor;","reflectedLight.directDiffuse *= diffuseColor;","reflectedLight.indirectDiffuse *= diffuseColor;")),v&&s.push(v.code,"reflectedLight.indirectDiffuse *= "+v.result+";","float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );","reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, "+v.result+", material.specularRoughness );"),C&&s.push(C.code,"reflectedLight.indirectDiffuse += "+C.result+";"),g&&s.push(g.code,"reflectedLight.directDiffuse *= "+g.result+";","reflectedLight.directSpecular *= "+g.result+";"),R&&s.push(R.code,"reflectedLight.directDiffuse += "+R.result+";"),T&&(s.push(T.code),S?s.push(S.code,"vec3 clearCoatRadiance = "+S.result+";"):s.push("vec3 clearCoatRadiance = vec3( 0.0 );"),s.push("RE_IndirectSpecular("+T.result+", clearCoatRadiance, geometry, material, reflectedLight );")),s.push("vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;"),d?s.push("gl_FragColor = vec4( outgoingLight, "+d.result+" );"):s.push("gl_FragColor = vec4( outgoingLight, 1.0 );"),s.push(THREE.ShaderChunk.premultiplied_alpha_fragment,THREE.ShaderChunk.tonemapping_fragment,THREE.ShaderChunk.encodings_fragment,THREE.ShaderChunk.fog_fragment),t=s.join("\n")}return t};