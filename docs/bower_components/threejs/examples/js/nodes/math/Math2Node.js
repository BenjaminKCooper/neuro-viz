THREE.Math2Node=function(t,e,E){THREE.TempNode.call(this),this.a=t,this.b=e,this.method=E||THREE.Math2Node.DISTANCE},THREE.Math2Node.MIN="min",THREE.Math2Node.MAX="max",THREE.Math2Node.MOD="mod",THREE.Math2Node.STEP="step",THREE.Math2Node.REFLECT="reflect",THREE.Math2Node.DISTANCE="distance",THREE.Math2Node.DOT="dot",THREE.Math2Node.CROSS="cross",THREE.Math2Node.POW="pow",THREE.Math2Node.prototype=Object.create(THREE.TempNode.prototype),THREE.Math2Node.prototype.constructor=THREE.Math2Node,THREE.Math2Node.prototype.getInputType=function(t){return t.getFormatLength(this.b.getType(t))>t.getFormatLength(this.a.getType(t))?this.b.getType(t):this.a.getType(t)},THREE.Math2Node.prototype.getType=function(t){switch(this.method){case THREE.Math2Node.DISTANCE:case THREE.Math2Node.DOT:return"fv1";case THREE.Math2Node.CROSS:return"v3"}return this.getInputType(t)},THREE.Math2Node.prototype.generate=function(t,e){var E,h,a=(t.material,this.getInputType(t)),o=t.getFormatLength(this.a.getType(t)),T=t.getFormatLength(this.b.getType(t));switch(this.method){case THREE.Math2Node.CROSS:E=this.a.build(t,"v3"),h=this.b.build(t,"v3");break;case THREE.Math2Node.STEP:E=this.a.build(t,1==o?"fv1":a),h=this.b.build(t,a);break;case THREE.Math2Node.MIN:case THREE.Math2Node.MAX:case THREE.Math2Node.MOD:E=this.a.build(t,a),h=this.b.build(t,1==T?"fv1":a);break;default:E=this.a.build(t,a),h=this.b.build(t,a)}return t.format(this.method+"("+E+","+h+")",this.getType(t),e)};