var worker,BLOCK=128,startX,startY,division,completed=0,scene,camera,renderer,loader,sceneId;importScripts("../../../build/three.js"),self.onmessage=function(r){var e=r.data;if(e){if(e.init){var a=e.init[0],t=e.init[1];worker=e.worker,BLOCK=e.blockSize,renderer||(renderer=new THREE.RaytracingRendererWorker),loader||(loader=new THREE.ObjectLoader),renderer.setSize(a,t),completed=0}if(e.scene){scene=loader.parse(e.scene),camera=loader.parse(e.camera);var o=e.annex;scene.traverse(function(r){r instanceof THREE.PointLight&&(r.physicalAttenuation=!0);var e=r.material;if(e){var a=o[e.uuid];for(var t in a)e[t]=a[t]}}),sceneId=e.sceneId}e.render&&scene&&camera&&(startX=e.x,startY=e.y,renderer.render(scene,camera))}},THREE.RaytracingRendererWorker=function(r){console.log("THREE.RaytracingRendererWorker",THREE.REVISION),r=r||{};var e,a,t,o,i,n,s=3,c=new THREE.Vector3,l=new THREE.Vector3,E=new THREE.Vector3,d=new THREE.Raycaster(c,l),m=new THREE.Raycaster,p=new THREE.Matrix4,R=new THREE.Matrix3,v=[],y={};this.setSize=function(r,i){e=r,a=i,t=Math.floor(e/2),o=Math.floor(a/2)};var f=function(){for(var r=new THREE.Color,e=new THREE.Color,a=new THREE.Color,t=new THREE.Color,o=new THREE.Color,i=new THREE.Vector3,c=new THREE.Vector3,l=new THREE.Vector3,E=new THREE.Vector3,p=new THREE.Vector3,R=new THREE.Vector3,f=new THREE.Vector3,M=[],T=0;T<s;T++)M[T]=new THREE.Color;return function T(h,H,g,w){var x=d.ray;x.origin=h,x.direction=H;var b=m.ray;g.setRGB(0,0,0);var V=d.intersectObjects(n,!0);if(0!==V.length){var S=V[0],W=S.point,C=S.object,k=C.material,z=S.face,I=C.geometry.vertices,L=y[C.id];if(p.copy(W).applyMatrix4(L.inverseMatrix),i.subVectors(d.ray.origin,W).normalize(),k instanceof THREE.MeshLambertMaterial||k instanceof THREE.MeshPhongMaterial||k instanceof THREE.MeshBasicMaterial?r.copyGammaToLinear(k.color):r.setRGB(1,1,1),k.vertexColors===THREE.FaceColors&&r.multiply(z.color),b.origin.copy(W),k instanceof THREE.MeshBasicMaterial)for(var O=0,j=v.length;O<j;O++){var B=v[O];c.setFromMatrixPosition(B.matrixWorld),c.sub(W),b.direction.copy(c).normalize();var V=m.intersectObjects(n,!0);V.length>0||g.add(r)}else if(k instanceof THREE.MeshLambertMaterial||k instanceof THREE.MeshPhongMaterial)for(var P=!1,O=0,j=v.length;O<j;O++){var B=v[O];a.copyGammaToLinear(B.color),c.setFromMatrixPosition(B.matrixWorld),c.sub(W),b.direction.copy(c).normalize();var V=m.intersectObjects(n,!0);if(!(V.length>0)){P===!1&&(u(l,p,k.shading,z,I),l.applyMatrix3(L.normalMatrix).normalize(),P=!0);var F=1;B.physicalAttenuation===!0&&(F=c.length(),F=1/(F*F)),c.normalize();var G=Math.max(l.dot(c),0),q=G*B.intensity;if(o.copy(r),o.multiply(a),o.multiplyScalar(q*F),g.add(o),k instanceof THREE.MeshPhongMaterial){E.addVectors(c,i).normalize();var A=Math.max(l.dot(E),0),N=Math.max(Math.pow(A,k.shininess),0)*q,X=(k.shininess+2)/8;e.copyGammaToLinear(k.specular);var Y=Math.pow(Math.max(1-c.dot(E),0),5);t.r=e.r+(1-e.r)*Y,t.g=e.g+(1-e.g)*Y,t.b=e.b+(1-e.b)*Y,o.copy(t),o.multiply(a),o.multiplyScalar(X*N*F),g.add(o)}}}var D=k.reflectivity;if((k.mirror||k.glass)&&D>0&&w<s){if(k.mirror)R.copy(H),R.reflect(l);else if(k.glass){var K=k.refractionRatio,U=H.dot(l),J=1-K*K*(1-U*U);if(J<0)R.set(0,0,0);else{R.copy(H),R.multiplyScalar(K);var Y=K*U+Math.sqrt(J);f.copy(l),f.multiplyScalar(Y),R.sub(f)}}var Q=Math.max(i.dot(l),0),Z=D,$=Z+(1-Z)*Math.pow(1-Q,5),_=$,rr=M[w];T(W,R,rr,w+1),void 0!==k.specular&&rr.multiply(k.specular),rr.multiplyScalar(_),g.multiplyScalar(1-_),g.add(rr)}}}}(),u=function(){var r=new THREE.Vector3,e=new THREE.Vector3,a=new THREE.Vector3;return function(t,o,i,n,s){var c=n.normal,l=n.vertexNormals;if(i===THREE.FlatShading)t.copy(c);else if(i===THREE.SmoothShading){var E=s[n.a],d=s[n.b],m=s[n.c];a.crossVectors(r.subVectors(d,E),e.subVectors(m,E));var p=c.dot(a);a.crossVectors(r.subVectors(d,o),e.subVectors(m,o));var R=c.dot(a),v=R/p;a.crossVectors(r.subVectors(m,o),e.subVectors(E,o));var y=c.dot(a),f=y/p,u=1-v-f;r.copy(l[0]),r.multiplyScalar(v),e.copy(l[1]),e.multiplyScalar(f),a.copy(l[2]),a.multiplyScalar(u),t.addVectors(r,e),t.add(a)}}}(),M=function(){var r=BLOCK,e=new Uint8ClampedArray(r*r*4),a=new THREE.Color;return function(n,s){for(var d=0,m=0;m<r;m++)for(var p=0;p<r;p++,d+=4)c.copy(E),l.set(p+n-t,-(m+s-o),-i),l.applyMatrix3(R).normalize(),f(c,l,a,0),e[d]=255*Math.sqrt(a.r),e[d+1]=255*Math.sqrt(a.g),e[d+2]=255*Math.sqrt(a.b),e[d+3]=255;self.postMessage({data:e.buffer,blockX:n,blockY:s,blockSize:r,sceneId:sceneId,time:Date.now()-reallyThen},[e.buffer]),e=new Uint8ClampedArray(r*r*4),completed++}}();this.render=function(r,e){reallyThen=Date.now(),r.autoUpdate===!0&&r.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),e.matrixWorldInverse.getInverse(e.matrixWorld),E.setFromMatrixPosition(e.matrixWorld),R.getNormalMatrix(e.matrixWorld),c.copy(E),i=.5/Math.tan(THREE.Math.degToRad(.5*e.fov))*a,n=r.children,v.length=0,r.traverse(function(r){r instanceof THREE.Light&&v.push(r),void 0===y[r.id]&&(y[r.id]={normalMatrix:new THREE.Matrix3,inverseMatrix:new THREE.Matrix4}),p.multiplyMatrices(e.matrixWorldInverse,r.matrixWorld);var a=y[r.id];a.normalMatrix.getNormalMatrix(p),a.inverseMatrix.getInverse(r.matrixWorld)}),M(startX,startY)}},Object.assign(THREE.RaytracingRendererWorker.prototype,THREE.EventDispatcher.prototype);