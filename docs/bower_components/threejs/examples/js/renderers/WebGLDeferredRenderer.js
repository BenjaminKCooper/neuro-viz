THREE.WebGLDeferredRenderer=function(e){function r(e){we.renderer=void 0!==e.renderer?e.renderer:new THREE.WebGLRenderer({antialias:!1}),we.domElement=we.renderer.domElement,ae=we.renderer.context,le=void 0!==e.width?e.width:we.renderer.getSize().width,se=void 0!==e.height?e.height:we.renderer.getSize().height;var r=void 0!==e.antialias&&e.antialias;void 0!==e.cacheKeepAlive&&(ye=e.cacheKeepAlive),t(),n(),i(),o(),a(),l(),we.setSize(le,se),we.setAntialias(r),we.enableLightPrePass(!1)}function t(){Ce=new THREE.DepthTexture(le,se,THREE.UnsignedInt248Type,void 0,void 0,void 0,void 0,void 0,void 0,THREE.DepthStencilFormat)}function n(){ge=new THREE.RenderPass,ge.clear=!0;var e=new THREE.WebGLRenderTarget(le,se,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,stencilBuffer:!0,depthTexture:Ce});e.texture.generateMipamps=!1,ce=new THREE.EffectComposer(we.renderer,e),ce.addPass(ge)}function i(){he=new THREE.RenderPass,he.clear=!0;var e=new THREE.WebGLRenderTarget(le,se,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:Ce});e.texture.generateMipamps=!1,de=new THREE.EffectComposer(we.renderer,e),de.addPass(he)}function o(){Re=new THREE.RenderPass,Re.clear=!0,Re.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),Te=new THREE.RenderPass,Te.clear=!1;var e=new THREE.WebGLRenderTarget(le,se,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:Ce});e.texture.generateMipamps=!1,ve=new THREE.EffectComposer(we.renderer,e),ve.addPass(Re),ve.addPass(Te)}function a(){fe=new THREE.RenderPass,fe.clear=!0;var e=new THREE.WebGLRenderTarget(le,se,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:Ce});e.texture.generateMipamps=!1,Ee=new THREE.EffectComposer(we.renderer,e),Ee.addPass(fe)}function l(){Se=new THREE.ShaderPass(THREE.ShaderDeferred.final),Se.clear=!0,Se.uniforms.samplerResult.value=ve.renderTarget2.texture,Se.material.blending=THREE.NoBlending,Se.material.depthWrite=!1,Se.material.depthTest=!1,ue=new THREE.RenderPass,ue.clear=!1,me=new THREE.ShaderPass(THREE.CopyShader),He=new THREE.ShaderPass(THREE.FXAAShader);var e=new THREE.WebGLRenderTarget(le,se,{minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,type:THREE.UnsignedByteType,depthTexture:Ce});e.texture.generateMipamps=!1,pe=new THREE.EffectComposer(we.renderer,e),pe.addPass(Se),pe.addPass(ue),pe.addPass(me),pe.addPass(He)}function s(e){var r=Ue[e.uuid],t=Fe[e.uuid];if(void 0===r){var n=new THREE.Scene;n.userData.lights={},r=$(),r.scene=n,Ue[e.uuid]=r}if(void 0===t){var n=new THREE.Scene;n.userData.lights={};var i=_();n.userData.emissiveLight=i,n.add(i),t=$(),t.scene=n,Fe[e.uuid]=t}r.used=!0,t.used=!0;var o=r.scene,a=t.scene;a.userData.emissiveLight.visible=!Ve,ke=o,De=a}function d(e,r,t){var n=r[e.uuid];if(void 0===n){n=$();var i;if(e.isMultiMaterial===!0){for(var o=[],a=0,l=e.materials.length;a<l;a++)o.push(t(e.materials[a]));i=new THREE.MultiMaterial(o)}else i=t(e);n.material=i,r[e.uuid]=n}return n.material}function h(e){if(void 0!==e.material){var r=Oe[e.uuid],t=u(r);if(Oe[t.uuid]=r,t.isMultiMaterial===!0)for(var n=0,i=t.materials.length;n<i;n++)Oe[t.materials[n].uuid]=r.materials[n],E(t.materials[n],r.materials[n]);else E(t,r);e.material=t,e.onBeforeRender=f}}function u(e){return d(e,Ve?Me:Ne,m)}function m(e){var r=Ve?THREE.ShaderDeferred.normalDepthShininess:THREE.ShaderDeferred.normalDepth;return new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending})}function E(e,r){void 0!==r.skinning&&(e.skinning=r.skinning),void 0!==r.morphTargets&&(e.morphTargets=r.morphTargets),r.visible===!0?e.visible=!r.transparent:e.visible=!1}function f(e,r,t,n,i,o){if(Ve){var a=Oe[i.uuid];void 0!==a&&void 0!==a.shininess&&(i.uniforms.shininess.value=a.shininess)}}function c(e){if(void 0!==e.material){var r=Oe[e.uuid],t=v(r);if(Oe[t.uuid]=r,r.isMultiMaterial===!0)for(var n=0,i=r.materials.length;n<i;n++)Oe[t.materials[n].uuid]=r.materials[n],g(t.materials[n],r.materials[n]);else g(t,r);e.material=t,e.onBeforeRender=T}}function v(e){return d(e,Le,p)}function p(e){var r=THREE.ShaderDeferred.color,t=new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending});return void 0!==e.map&&(t.map=e.map),t}function g(e,r){void 0!==r.map&&(e.map=r.map),void 0!==r.skinning&&(e.skinning=r.skinning),void 0!==r.morphTargets&&(e.morphTargets=r.morphTargets),r.visible===!0?e.visible=!r.transparent:e.visible=!1}function T(e,r,t,n,i,o){var a,l,s=Oe[i.uuid],d=i.uniforms;s.isMeshBasicMaterial===!0?l=s.color:(a=s.color,l=s.emissive);var h=s.specular,u=s.shininess,m=s.map;void 0!==a&&d.diffuse.value.copy(a),void 0!==l&&d.emissive.value.copy(l),void 0!==h&&d.specular.value.copy(h),void 0!==u&&void 0!==d.shininess&&(d.shininess.value=u),void 0!==m&&(d.map.value=m)}function R(e){if(void 0!==e.material){var r=Oe[e.uuid];if(r.transparent===!0)return e.material=r,void(e.onBeforeRender=Ge[e.uuid]);var t=S(r);if(Oe[t.uuid]=r,r.isMultiMaterial===!0)for(var n=0,i=r.materials.length;n<i;n++)Oe[t.materials[n].uuid]=r.materials[n],C(t.materials[n],r.materials[n]);else C(t,r);e.material=t,e.onBeforeRender=x}}function S(e){return d(e,ze,H)}function H(e){var r=THREE.ShaderDeferred.reconstruction,t=new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending});return void 0!==e.map&&(t.map=e.map),t}function C(e,r){g(e,r)}function x(e,r,t,n,i,o){T(e,r,t,n,i,o),i.uniforms.samplerLight.value=ve.renderTarget2.texture}function k(e){if(void 0!==e.material){var r=Oe[e.uuid];if(r.isMultiMaterial===!0){for(var t=D(r),n=0,i=r.materials.length;n<i;n++)t.materials[n]=P(r.materials[n]);e.material=t}else e.material=P(r);e.onBeforeRender=Ge[e.uuid]}}function D(e){return d(e,Ie,w)}function w(e){return be}function P(e){return e.transparent===!0&&e.visible===!0?e:be}function _(){var e=THREE.ShaderDeferred.emissiveLight,r=new THREE.ShaderMaterial({uniforms:Object.assign({},e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,blending:THREE.NoBlending,depthWrite:!1}),t=new THREE.PlaneBufferGeometry(2,2),n=new THREE.Mesh(t,r);return n.onBeforeRender=function(e,r,t,n,i,o){i.uniforms.samplerColor.value=de.renderTarget2.texture},n}function V(e){return e.isPointLight?M(e):e.isSpotLight?W(e):e.isDirectionalLight?O(e):null}function y(e){return e.isPointLight?L():e.isSpotLight?B():e.isDirectionalLight?G():null}function b(e){var r=Ve?Ae:Be,t=r[e.uuid];return void 0===t&&(t=$(),t.material=y(e.userData.originalLight),r[e.uuid]=t),t.material}function j(e){var r=e.userData.originalLight;r.isPointLight&&z(e)}function U(e,r){var t=new THREE.Mesh(r,be);return t.userData.originalLight=e,t}function F(e){var r=new THREE.ShaderMaterial({uniforms:Object.assign({},e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,transparent:!0,blending:THREE.AdditiveBlending,depthWrite:!1});return Ve&&(r.premultipliedAlpha=!0),r}function N(e){Ve?e.samplerNormalDepthShininess.value=ce.renderTarget2.texture:(e.samplerNormalDepth.value=ce.renderTarget2.texture,e.samplerColor.value=de.renderTarget2.texture)}function M(e){var r=U(e,new THREE.SphereGeometry(1,16,8));return r.onBeforeRender=I,r}function L(){var e=Ve?THREE.ShaderDeferred.pointLightPre:THREE.ShaderDeferred.pointLight,r=F(e);return r.side=THREE.BackSide,r.depthFunc=THREE.GreaterEqualDepth,r}function z(e){var r=e.userData.originalLight,t=r.distance;t>0&&(e.scale.set(1,1,1).multiplyScalar(t),e.position.setFromMatrixPosition(r.matrixWorld))}function I(e,r,t,n,i,o){var a=this,l=a.userData.originalLight,s=l.distance,d=i.uniforms;d.lightColor.value.copy(l.color),s>0?(d.lightRadius.value=s,d.lightIntensity.value=l.intensity,d.lightPositionVS.value.setFromMatrixPosition(l.matrixWorld).applyMatrix4(xe.matrixWorldInverse)):d.lightRadius.value=1/0,N(d)}function W(e){var r=U(e,new THREE.PlaneBufferGeometry(2,2));return r.onBeforeRender=A,r}function B(){var e=Ve?THREE.ShaderDeferred.spotLightPre:THREE.ShaderDeferred.spotLight,r=F(e);return r.depthTest=!1,r}function A(e,r,t,n,i,o){var a=this,l=a.userData.originalLight,s=a.material.uniforms;s.lightAngle.value=l.angle,s.lightColor.value.copy(l.color),s.lightIntensity.value=l.intensity,s.lightPositionVS.value.setFromMatrixPosition(l.matrixWorld).applyMatrix4(xe.matrixWorldInverse);var d=s.lightDirectionVS.value,h=je;d.setFromMatrixPosition(l.matrixWorld),h.setFromMatrixPosition(l.target.matrixWorld),d.sub(h).normalize().transformDirection(xe.matrixWorldInverse),N(s)}function O(e){var r=U(e,new THREE.PlaneBufferGeometry(2,2));return r.onBeforeRender=K,r}function G(){var e=Ve?THREE.ShaderDeferred.directionalLightPre:THREE.ShaderDeferred.directionalLight,r=F(e);return r.depthTest=!1,r}function K(e,r,t,n,i,o){var a=this,l=a.userData.originalLight,s=a.material.uniforms;s.lightColor.value.copy(l.color),s.lightIntensity.value=l.intensity;var d=s.lightDirectionVS.value,h=je;d.setFromMatrixPosition(l.matrixWorld),h.setFromMatrixPosition(l.target.matrixWorld),d.sub(h).normalize().transformDirection(xe.matrixWorldInverse),N(s)}function q(e){if(void 0!==e.material&&(Oe[e.uuid]=e.material,Ge[e.uuid]=e.onBeforeRender,!_e&&!Ve))if(e.material.isMultiMaterial===!0){for(var r=0,t=e.material.materials.length;r<t;r++)if(e.material.materials[r].transparent===!0){_e=!0;break}}else e.material.transparent===!0&&(_e=!0)}function Q(e){void 0!==e.material&&(e.material=Oe[e.uuid],e.onBeforeRender=Ge[e.uuid])}function X(e){if(e.isLight===!0){var r=We[e.uuid];void 0===r&&(r=$(),r.light=V(e),We[e.uuid]=r);var t=r.light;if(null!==t){var n=e.isPointLight===!0?ke:De,i=n.userData.lights;void 0===i[t.uuid]&&(n.add(t),i[t.uuid]={light:t,found:!0}),i[t.uuid].found=!0}}}function Y(e){for(var r=e.userData.lights,t=Object.keys(r),n=0,i=t.length;n<i;n++){var o=t[n];if(r[o].found===!1)e.remove(r[o].light),delete r[o];else{var a=r[o].light;a.material=b(a),j(a),r[o].found=!1}}}function J(e){var r=THREE.ShaderDeferredCommon.commonUniforms;r.viewWidth.value=le,r.viewHeight.value=se,r.matProjInverse.value.getInverse(e.projectionMatrix)}function Z(){Ve?(ue.renderToScreen=!1,ue.enabled=!1,me.renderToScreen=!1,me.enabled=!1,Pe?(Se.renderToScreen=!1,He.renderToScreen=!0,He.enabled=!0):(Se.renderToScreen=!0,He.renderToScreen=!1,He.enabled=!1)):_e?Pe?(Se.renderToScreen=!1,ue.renderToScreen=!1,ue.enabled=!0,me.renderToScreen=!1,me.enabled=!1,He.renderToScreen=!0,He.enabled=!0):(Se.renderToScreen=!1,ue.renderToScreen=!1,ue.enabled=!0,me.renderToScreen=!0,me.enabled=!0,He.renderToScreen=!1,He.enabled=!1):Pe?(Se.renderToScreen=!1,ue.renderToScreen=!1,ue.enabled=!1,me.renderToScreen=!1,me.enabled=!1,He.renderToScreen=!0,He.enabled=!0):(Se.renderToScreen=!0,ue.renderToScreen=!1,ue.enabled=!1,me.renderToScreen=!1,me.enabled=!1,He.renderToScreen=!1,He.enabled=!1)}function $(){return{used:!0,keepAlive:ye,count:0}}function ee(e,r){e.traverse(h),ge.scene=e,ge.camera=r,we.renderer.autoClearDepth=!0,we.renderer.autoClearStencil=!0,ae.enable(ae.STENCIL_TEST),ae.stencilFunc(ae.ALWAYS,1,4294967295),ae.stencilOp(ae.REPLACE,ae.REPLACE,ae.REPLACE),ce.render()}function re(e,r){e.traverse(c),he.scene=e,he.camera=r,we.renderer.autoClearDepth=!1,we.renderer.autoClearStencil=!1,ae.stencilFunc(ae.EQUAL,1,4294967295),ae.stencilOp(ae.KEEP,ae.KEEP,ae.KEEP),de.render()}function te(e,r){e.traverse(X),Y(ke),Y(De),Te.scene=ke,Te.camera=r,Re.scene=De,we.renderer.autoClearDepth=!1,we.renderer.autoClearStencil=!1,ve.render(),ae.disable(ae.STENCIL_TEST)}function ne(e,r){e.traverse(X),Y(ke),Y(De),Te.scene=ke,Te.camera=r,Re.scene=De,we.renderer.autoClearDepth=!1,we.renderer.autoClearStencil=!1,ae.stencilFunc(ae.EQUAL,1,4294967295),ae.stencilOp(ae.KEEP,ae.KEEP,ae.KEEP),ve.render()}function ie(e,r){e.traverse(R),fe.scene=e,fe.camera=r,we.renderer.autoClearDepth=!1,we.renderer.autoClearStencil=!1,Ee.render(),ae.disable(ae.STENCIL_TEST)}function oe(e,r){!Ve&&_e&&(e.traverse(k),ue.scene=e,ue.camera=r),Z(),we.renderer.autoClearDepth=!1,we.renderer.autoClearStencil=!1,pe.render()}e=e||{};var ae,le,se,de,he,ue,me,Ee,fe,ce,ve,pe,ge,Te,Re,Se,He,Ce,xe,ke,De,we=this,Pe=!1,_e=!1,Ve=!1,ye=!1,be=new THREE.ShaderMaterial({visible:!1}),je=new THREE.Vector3,Ue={},Fe={},Ne={},Me={},Le={},ze={},Ie={},We={},Be={},Ae={},Oe={},Ge={};this.renderer=void 0,this.domElement=void 0,this.forwardRendering=!1,this.setSize=function(e,r){le=e,se=r,this.renderer.setSize(le,se),ce.setSize(le,se),de.setSize(le,se),ve.setSize(le,se),Ee.setSize(le,se),pe.setSize(le,se),Ce.image.width=le,Ce.image.height=se,Ce.needsUpdate=!0,He.uniforms.resolution.value.set(1/le,1/se)},this.setAntialias=function(e){Pe=e},this.enableLightPrePass=function(e){Ve=e,Se.uniforms.samplerResult.value=Ve?Ee.renderTarget2.texture:ve.renderTarget2.texture},this.render=function(e,r){if(this.forwardRendering)return void this.renderer.render(e,r);var t=e.autoUpdate,n=this.renderer.autoClearColor,i=this.renderer.autoClearDepth,o=this.renderer.autoClearStencil;xe=r,s(e),e.autoUpdate=!1,e.updateMatrixWorld(),_e=!1,e.traverse(q),J(r),ee(e,r),Ve?(ne(e,r),ie(e,r)):(re(e,r),te(e,r)),oe(e,r),e.traverse(Q),e.autoUpdate=t,this.renderer.autoClearColor=n,this.renderer.autoClearDepth=i,this.renderer.autoClearStencil=o},r(e)},THREE.DeferredShaderChunk={packVector3:["float vec3_to_float( vec3 data ) {","\tconst float unit = 255.0/256.0;","\thighp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;","\treturn compressed;","}"].join("\n"),unpackFloat:["vec3 float_to_vec3( float data ) {","\tconst float unit = 255.0;","\tvec3 uncompressed;","\tuncompressed.x = fract( data );","\tfloat zInt = floor( data / unit );","\tuncompressed.z = fract( zInt / unit );","\tuncompressed.y = fract( floor( data - ( zInt * unit ) ) / unit );","\treturn uncompressed;","}"].join("\n"),packNormal:["vec2 normal_to_vec2( vec3 normal ) {","\treturn normal.xy / sqrt( normal.z * 8.0 + 8.0 ) + 0.5;","}"].join("\n"),unpackVector2:["vec3 vec2_to_normal( vec2 data ) {","\tvec2 fenc = data * 4.0 - 2.0;","\tfloat f = dot( fenc, fenc );","\tfloat g = sqrt( 1.0 - f / 4.0 );","\tvec3 normal;","\tnormal.xy = fenc * g;","\tnormal.z = 1.0 - f / 2.0;","\treturn normal;","}"].join("\n"),computeTextureCoord:["vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );"].join("\n"),packNormalDepth:["vec4 packedNormalDepth;","packedNormalDepth.xyz = normal * 0.5 + 0.5;","packedNormalDepth.w = position.z / position.w;"].join("\n"),unpackNormalDepth:["vec4 normalDepthMap = texture2D( samplerNormalDepth, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = normalDepthMap.xyz * 2.0 - 1.0;"].join("\n"),packNormalDepthShininess:["vec4 packedNormalDepthShininess;","packedNormalDepthShininess.xy = normal_to_vec2( normal );","packedNormalDepthShininess.z = shininess;","packedNormalDepthShininess.w = position.z / position.w;"].join("\n"),unpackNormalDepthShininess:["vec4 normalDepthMap = texture2D( samplerNormalDepthShininess, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = vec2_to_normal( normalDepthMap.xy );","float shininess = normalDepthMap.z;"].join("\n"),packColor:["vec4 packedColor;","packedColor.x = vec3_to_float( diffuseColor.rgb );","packedColor.y = vec3_to_float( emissiveColor );","packedColor.z = vec3_to_float( specularColor );","packedColor.w = shininess;"].join("\n"),unpackColor:["vec4 colorMap = texture2D( samplerColor, texCoord );","vec3 diffuseColor = float_to_vec3( colorMap.x );","vec3 emissiveColor = float_to_vec3( colorMap.y );","vec3 specularColor = float_to_vec3( colorMap.z );","float shininess = colorMap.w;"].join("\n"),packLight:["vec4 packedLight;","packedLight.xyz = lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * attenuation;","packedLight.w = lightIntensity * specular * max( dot( lightVector, normal ), 0.0 ) * attenuation;"].join("\n"),computeVertexPositionVS:["vec2 xy = texCoord * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, depth, 1.0 );","vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeSpecular:["vec3 halfVector = normalize( lightVector - normalize( vertexPositionVS.xyz ) );","float dotNormalHalf = max( dot( normal, halfVector ), 0.0 );","float specular = 0.31830988618 * ( shininess * 0.5 + 1.0 ) * pow( dotNormalHalf, shininess );"].join("\n"),combine:["gl_FragColor = vec4( lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * ( diffuseColor + specular * specularColor ) * attenuation, 1.0 );"].join("\n")},THREE.ShaderDeferredCommon={commonUniforms:{matProjInverse:new THREE.Uniform(new THREE.Matrix4),viewWidth:new THREE.Uniform(800),viewHeight:new THREE.Uniform(600)}},THREE.ShaderDeferred={normalDepth:{uniforms:{},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;",THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.begin_vertex,THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,"\tvNormal = normalize( normalMatrix * objectNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",THREE.DeferredShaderChunk.packNormalDepth,"\tgl_FragColor = packedNormalDepth;","}"].join("\n")},color:{uniforms:{map:new THREE.Uniform(null),offsetRepeat:new THREE.Uniform(new THREE.Vector4(0,0,1,1)),diffuse:new THREE.Uniform(new THREE.Color(0)),emissive:new THREE.Uniform(new THREE.Color(0)),specular:new THREE.Uniform(new THREE.Color(0)),shininess:new THREE.Uniform(30)},vertexShader:[THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.begin_vertex,THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;",THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.DeferredShaderChunk.packVector3,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;",THREE.ShaderChunk.map_fragment,THREE.DeferredShaderChunk.packColor,"\tgl_FragColor = packedColor;","}"].join("\n")},emissiveLight:{uniforms:Object.assign({samplerColor:new THREE.Uniform(null)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackColor,"\tgl_FragColor = vec4( emissiveColor, 1.0 );","}"].join("\n")},pointLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1),lightRadius:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",THREE.DeferredShaderChunk.unpackColor,THREE.DeferredShaderChunk.computeSpecular,"\t//float cutoff = 0.3;","\t//float denom = distance / lightRadius + 1.0;","\t//float attenuation = 1.0 / ( denom * denom );","\t//attenuation = ( attenuation - cutoff ) / ( 1.0 - cutoff );","\t//attenuation = max( attenuation, 0.0 );","\t//attenuation *= attenuation;","\t//diffuseColor *= saturate( -distance / lightRadius + 1.0 );","\t//float attenuation = 1.0;","\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",THREE.DeferredShaderChunk.combine,"}"].join("\n")},spotLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightAngle:new THREE.Uniform(1),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,THREE.DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}","\tdiffuseColor *= spot;",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.combine,"}"].join("\n")},directionalLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,THREE.DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightDirectionVS );",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.combine,"}"].join("\n")},normalDepthShininess:{uniforms:{shininess:new THREE.Uniform(30)},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;",THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.begin_vertex,THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,"\tvNormal = normalize( normalMatrix * objectNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","uniform float shininess;",THREE.DeferredShaderChunk.packNormal,"void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",THREE.DeferredShaderChunk.packNormalDepthShininess,"\tgl_FragColor = packedNormalDepthShininess;","}"].join("\n")},pointLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1),lightRadius:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",THREE.DeferredShaderChunk.computeSpecular,"\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},spotLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightAngle:new THREE.Uniform(1),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = spot * packedLight;","}"].join("\n")},directionalLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightDirectionVS );",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},reconstruction:{uniforms:Object.assign({samplerLight:new THREE.Uniform(null),map:new THREE.Uniform(null),offsetRepeat:new THREE.Uniform(new THREE.Vector4(0,0,1,1)),diffuse:new THREE.Uniform(new THREE.Color(0)),emissive:new THREE.Uniform(new THREE.Color(0)),specular:new THREE.Uniform(new THREE.Color(0)),shininess:new THREE.Uniform(30)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:[THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.begin_vertex,THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D samplerLight;","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","uniform float viewHeight;","uniform float viewWidth;",THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.DeferredShaderChunk.unpackFloat,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;",THREE.DeferredShaderChunk.computeTextureCoord,"\tvec4 light = texture2D( samplerLight, texCoord );",THREE.ShaderChunk.map_fragment,"\tvec3 diffuseFinal = diffuseColor.rgb * light.rgb;","\tvec3 emissiveFinal = emissiveColor;","\tvec3 specularFinal = specularColor * light.rgb * light.a;","\tgl_FragColor = vec4( diffuseFinal + emissiveFinal + specularFinal, 1.0 );","}"].join("\n")},final:{uniforms:{samplerResult:new THREE.Uniform(null)},vertexShader:["varying vec2 texCoord;","void main() {","\tvec4 pos = vec4( sign( position.xy ), 0.0, 1.0 );","\ttexCoord = pos.xy * vec2( 0.5 ) + 0.5;","\tgl_Position = pos;","}"].join("\n"),fragmentShader:["varying vec2 texCoord;","uniform sampler2D samplerResult;","void main() {","\tgl_FragColor = texture2D( samplerResult, texCoord );","}"].join("\n")}};