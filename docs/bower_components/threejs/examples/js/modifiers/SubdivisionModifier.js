THREE.SubdivisionModifier=function(e){this.subdivisions=void 0===e?1:e},THREE.SubdivisionModifier.prototype.modify=function(e){for(var n=this.subdivisions;n-- >0;)this.smooth(e);e.computeFaceNormals(),e.computeVertexNormals()},function(){function e(e,n,o){var a=Math.min(e,n),t=Math.max(e,n),c=a+"_"+t;return o[c]}function n(e,n,o,a,t,c){var i,r=Math.min(e,n),s=Math.max(e,n),d=r+"_"+s;if(d in a)i=a[d];else{var l=o[r],f=o[s];i={a:l,b:f,newEdge:null,faces:[]},a[d]=i}i.faces.push(t),c[e].edges.push(i),c[n].edges.push(i)}function o(e,o,a,t){var c,i,r;for(c=0,i=e.length;c<i;c++)a[c]={edges:[]};for(c=0,i=o.length;c<i;c++)r=o[c],n(r.a,r.b,e,t,r,a),n(r.b,r.c,e,t,r,a),n(r.c,r.a,e,t,r,a)}function a(e,n,o,a){e.push(new THREE.Face3(n,o,a))}function t(e,n){return Math.abs(n-e)/2+Math.min(e,n)}function c(e,n,o,a){e.push([n.clone(),o.clone(),a.clone()])}var i=!1,r=["a","b","c"];THREE.SubdivisionModifier.prototype.smooth=function(n){var s,d,l,f,u,h,g,v,E,b,m,p,p,w,y,x=new THREE.Vector3,M=[];s=n.vertices,d=n.faces,l=n.faceVertexUvs[0];var H=void 0!==l&&l.length>0;m=new Array(s.length),p={},o(s,d,m,p),w=[];var R,T,V,S,N,F,U;for(g in p){for(T=p[g],V=new THREE.Vector3,N=3/8,F=1/8,U=T.faces.length,2!=U&&(N=.5,F=0,1!=U&&i&&console.warn("Subdivision Modifier: Number of connected faces != 2, is: ",U,T)),V.addVectors(T.a,T.b).multiplyScalar(N),x.set(0,0,0),E=0;E<U;E++){for(S=T.faces[E],b=0;b<3&&(R=s[S[r[b]]],R===T.a||R===T.b);b++);x.add(R)}x.multiplyScalar(F),V.add(x),T.newEdge=w.length,w.push(V)}var _,A,j,k,q,z,B;for(y=[],g=0,v=s.length;g<v;g++){for(z=s[g],q=m[g].edges,h=q.length,3==h?_=3/16:h>3&&(_=3/(8*h)),A=1-h*_,j=_,h<=2&&(2==h?(i&&console.warn("2 connecting edges",q),A=.75,j=1/8):1==h?i&&console.warn("only 1 connecting edge"):0==h&&i&&console.warn("0 connecting edges")),B=z.clone().multiplyScalar(A),x.set(0,0,0),E=0;E<h;E++)k=q[E],R=k.a!==z?k.a:k.b,x.add(R);x.multiplyScalar(j),B.add(x),y.push(B)}f=y.concat(w);var C,D,G,I=y.length;u=[];var J,K,L,O,P=new THREE.Vector2,Q=new THREE.Vector2,W=new THREE.Vector2;for(g=0,v=d.length;g<v;g++)S=d[g],C=e(S.a,S.b,p).newEdge+I,D=e(S.b,S.c,p).newEdge+I,G=e(S.c,S.a,p).newEdge+I,a(u,C,D,G),a(u,S.a,C,G),a(u,S.b,D,C),a(u,S.c,G,D),H&&(J=l[g],K=J[0],L=J[1],O=J[2],P.set(t(K.x,L.x),t(K.y,L.y)),Q.set(t(L.x,O.x),t(L.y,O.y)),W.set(t(K.x,O.x),t(K.y,O.y)),c(M,P,Q,W),c(M,K,P,W),c(M,L,Q,P),c(M,O,W,Q));n.vertices=f,n.faces=u,H&&(n.faceVertexUvs[0]=M)}}();