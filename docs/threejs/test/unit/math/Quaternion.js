function doSlerpObject(e,o,t){var n=(new THREE.Quaternion).fromArray(e),a=(new THREE.Quaternion).fromArray(o),r=(new THREE.Quaternion).fromArray(e);return r.slerp(a,t),{equals:function(e,o,t,n,a){return void 0===a&&(a=Number.EPSILON),Math.abs(e-r.x)<=a&&Math.abs(o-r.y)<=a&&Math.abs(t-r.z)<=a&&Math.abs(n-r.w)<=a},length:r.length(),dotA:r.dot(n),dotB:r.dot(a)}}function doSlerpArray(e,o,t){function n(e,o){return e[0]*o[0]+e[1]*o[1]+e[2]*o[2]+e[3]*o[3]}var a=[0,0,0,0];return THREE.Quaternion.slerpFlat(a,0,e,0,o,0,t),{equals:function(e,o,t,n,r){return void 0===r&&(r=Number.EPSILON),Math.abs(e-a[0])<=r&&Math.abs(o-a[1])<=r&&Math.abs(t-a[2])<=r&&Math.abs(n-a[3])<=r},length:Math.sqrt(n(a,a)),dotA:n(a,e),dotB:n(a,o)}}function slerpTestSkeleton(e,o){function t(e){var t=Math.abs(1-e.length);return s=Math.max(s,t),t<=o}var n,a,r;n=[.6753410084407496,.4087830051091744,.32856700410659473,.5185120064806223],a=[.6602792107657797,.43647413932562285,.35119011210236006,.5001871596632682];var s=0;r=e(n,a,0),ok(r.equals(n[0],n[1],n[2],n[3],0),"Exactly A @ t = 0"),r=e(n,a,1),ok(r.equals(a[0],a[1],a[2],a[3],0),"Exactly B @ t = 1"),r=e(n,a,.5),ok(Math.abs(r.dotA-r.dotB)<=Number.EPSILON,"Symmetry at 0.5"),ok(t(r),"Approximately normal (at 0.5)"),r=e(n,a,.25),ok(r.dotA>r.dotB,"Interpolating at 0.25"),ok(t(r),"Approximately normal (at 0.25)"),r=e(n,a,.75),ok(r.dotA<r.dotB,"Interpolating at 0.75"),ok(t(r),"Approximately normal (at 0.75)");var E=Math.SQRT1_2;r=e([1,0,0,0],[0,0,1,0],.5),ok(r.equals(E,0,E,0),"X/Z diagonal from axes"),ok(t(r),"Approximately normal (X/Z diagonal)"),r=e([0,E,0,E],[0,-E,0,E],.5),ok(r.equals(0,0,0,1),"W-Unit from diagonals"),ok(t(r),"Approximately normal (W-Unit)")}module("Quaternion");var orders=["XYZ","YXZ","ZXY","ZYX","YZX","XZY"],eulerAngles=new THREE.Euler(.1,-.3,.25),qSub=function(e,o){var t=new THREE.Quaternion;return t.copy(e),t.x-=o.x,t.y-=o.y,t.z-=o.z,t.w-=o.w,t};test("constructor",function(){var e=new THREE.Quaternion;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),ok(1==e.w,"Passed!"),e=new THREE.Quaternion(x,y,z,w),ok(e.x===x,"Passed!"),ok(e.y===y,"Passed!"),ok(e.z===z,"Passed!"),ok(e.w===w,"Passed!")}),test("copy",function(){var e=new THREE.Quaternion(x,y,z,w),o=(new THREE.Quaternion).copy(e);ok(o.x==x,"Passed!"),ok(o.y==y,"Passed!"),ok(o.z==z,"Passed!"),ok(o.w==w,"Passed!"),e.x=0,e.y=-1,e.z=0,e.w=-1,ok(o.x==x,"Passed!"),ok(o.y==y,"Passed!")}),test("set",function(){var e=new THREE.Quaternion;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),ok(0==e.z,"Passed!"),ok(1==e.w,"Passed!"),e.set(x,y,z,w),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!"),ok(e.z===z,"Passed!"),ok(e.w===w,"Passed!")}),test("setFromAxisAngle",function(){ok(!0,"Passed!");var e=new THREE.Quaternion,o=(new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(1,0,0),0);ok(o.equals(e),"Passed!"),o=(new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(0,1,0),0),ok(o.equals(e),"Passed!"),o=(new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(0,0,1),0),ok(o.equals(e),"Passed!");var t=(new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(1,0,0),Math.PI);ok(!o.equals(t),"Passed!");var n=(new THREE.Quaternion).setFromAxisAngle(new THREE.Vector3(1,0,0),-Math.PI);ok(!o.equals(n),"Passed!"),t.multiply(n),ok(o.equals(t),"Passed!")}),test("setFromEuler/setFromQuaternion",function(){for(var e=[new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1)],o=0;o<orders.length;o++)for(var t=0;t<e.length;t++){var n=(new THREE.Euler).setFromQuaternion((new THREE.Quaternion).setFromEuler(new THREE.Euler(e[t].x,e[t].y,e[t].z,orders[o])),orders[o]),a=new THREE.Vector3(n.x,n.y,n.z);ok(a.distanceTo(e[t])<.001,"Passed!")}}),test("setFromEuler/setFromRotationMatrix",function(){for(var e=0;e<orders.length;e++){var o=(new THREE.Quaternion).setFromEuler(eulerAngles,orders[e]),t=(new THREE.Matrix4).makeRotationFromEuler(eulerAngles,orders[e]),n=(new THREE.Quaternion).setFromRotationMatrix(t);ok(qSub(o,n).length()<.001,"Passed!")}}),test("normalize/length/lengthSq",function(){var e=new THREE.Quaternion(x,y,z,w);new THREE.Quaternion(-x,-y,-z,-w);ok(1!=e.length(),"Passed!"),ok(1!=e.lengthSq(),"Passed!"),e.normalize(),ok(1==e.length(),"Passed!"),ok(1==e.lengthSq(),"Passed!"),e.set(0,0,0,0),ok(0==e.lengthSq(),"Passed!"),ok(0==e.length(),"Passed!"),e.normalize(),ok(1==e.lengthSq(),"Passed!"),ok(1==e.length(),"Passed!")}),test("inverse/conjugate",function(){var e=new THREE.Quaternion(x,y,z,w),o=e.clone().conjugate();ok(e.x==-o.x,"Passed!"),ok(e.y==-o.y,"Passed!"),ok(e.z==-o.z,"Passed!"),ok(e.w==o.w,"Passed!")}),test("multiplyQuaternions/multiply",function(){var e=[new THREE.Euler(1,0,0),new THREE.Euler(0,1,0),new THREE.Euler(0,0,1)],o=(new THREE.Quaternion).setFromEuler(e[0],"XYZ"),t=(new THREE.Quaternion).setFromEuler(e[1],"XYZ"),n=(new THREE.Quaternion).setFromEuler(e[2],"XYZ"),a=(new THREE.Quaternion).multiplyQuaternions(o,t).multiply(n),r=(new THREE.Matrix4).makeRotationFromEuler(e[0],"XYZ"),s=(new THREE.Matrix4).makeRotationFromEuler(e[1],"XYZ"),E=(new THREE.Matrix4).makeRotationFromEuler(e[2],"XYZ"),l=(new THREE.Matrix4).multiplyMatrices(r,s).multiply(E),u=(new THREE.Quaternion).setFromRotationMatrix(l);ok(qSub(a,u).length()<.001,"Passed!")}),test("multiplyVector3",function(){for(var e=[new THREE.Euler(1,0,0),new THREE.Euler(0,1,0),new THREE.Euler(0,0,1)],o=0;o<orders.length;o++)for(var t=0;t<e.length;t++){var n=(new THREE.Quaternion).setFromEuler(e[t],orders[o]),a=(new THREE.Matrix4).makeRotationFromEuler(e[t],orders[o]),r=new THREE.Vector3(1,0,0),s=r.clone().applyQuaternion(n),E=r.clone().applyMatrix4(a);ok(s.distanceTo(E)<.001,"Passed!")}}),test("equals",function(){var e=new THREE.Quaternion(x,y,z,w),o=new THREE.Quaternion(-x,-y,-z,-w);ok(e.x!=o.x,"Passed!"),ok(e.y!=o.y,"Passed!"),ok(!e.equals(o),"Passed!"),ok(!o.equals(e),"Passed!"),e.copy(o),ok(e.x==o.x,"Passed!"),ok(e.y==o.y,"Passed!"),ok(e.equals(o),"Passed!"),ok(o.equals(e),"Passed!")}),test("slerp",function(){slerpTestSkeleton(doSlerpObject,Number.EPSILON)}),test("slerpFlat",function(){slerpTestSkeleton(doSlerpArray,Number.EPSILON)});