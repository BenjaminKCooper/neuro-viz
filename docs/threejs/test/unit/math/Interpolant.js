function Mock(l,a,e,c){THREE.Interpolant.call(this,l,a,e,c)}module("Interpolant"),Mock.prototype=Object.create(THREE.Interpolant.prototype),Mock.prototype.intervalChanged_=function(l,a,e){Mock.captureCall(arguments)},Mock.prototype.interpolate_=function(l,a,e,c){return Mock.captureCall(arguments),this.copySampleValue_(l-1)},Mock.prototype.beforeStart_=function(l,a,e){return Mock.captureCall(arguments),this.copySampleValue_(l)},Mock.prototype.afterEnd_=function(l,a,e){return Mock.captureCall(arguments),this.copySampleValue_(l)},Mock.calls=null,Mock.captureCall=function(l){null!==Mock.calls&&Mock.calls.push({func:Mock.captureCall.caller.name,args:Array.prototype.slice.call(l)})},test("copySampleValue_",function(){var l=new Mock(null,[1,11,2,22,3,33],2,[]);deepEqual(l.copySampleValue_(0),[1,11],"sample fetch (0)"),deepEqual(l.copySampleValue_(1),[2,22],"sample fetch (1)"),deepEqual(l.copySampleValue_(2),[3,33],"first sample (2)")}),test("evaluate -> intervalChanged_ / interpolate_",function(){var l,a,e=new Mock([11,22,33,44,55,66,77,88,99],null,0,null);Mock.calls=[],e.evaluate(11),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,11,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(12),l=Mock.calls[0],a={func:"interpolate",args:[1,11,12,22]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(22),l=Mock.calls[0],a={func:"intervalChanged",args:[2,22,33]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[2,22,22,33]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length),Mock.calls=[],e.evaluate(21),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,21,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(20),l=Mock.calls[0],a={func:"interpolate",args:[1,11,20,22]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(43),l=Mock.calls[0],a={func:"intervalChanged",args:[3,33,44]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[3,33,43,44]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(12),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,12,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(77),l=Mock.calls[0],a={func:"intervalChanged",args:[7,77,88]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[7,77,77,88]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(80),l=Mock.calls[0],a={func:"interpolate",args:[7,77,80,88]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(36),l=Mock.calls[0],a={func:"intervalChanged",args:[3,33,44]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[3,33,36,44]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(24),l=Mock.calls[0],a={func:"intervalChanged",args:[2,22,33]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[2,22,24,33]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(16),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,16,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls")}),test("evaulate -> beforeStart_ [once]",function(){var l,a,e=new Mock([11,22,33],null,0,null);Mock.calls=[],e.evaluate(10),l=Mock.calls[0],a={func:"beforeStart",args:[0,10,11]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(11),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,11,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(10),l=Mock.calls[0],a={func:"beforeStart",args:[0,10,11]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls")}),test("evaluate -> beforeStart_ [twice]",function(){var l,a,e=new Mock([11,22,33],null,0,null);Mock.calls=[],e.evaluate(10),l=Mock.calls[0],a={func:"beforeStart",args:[0,10,11]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(10),l=Mock.calls[0],a={func:"beforeStart",args:[0,10,11]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(11),l=Mock.calls[0],a={func:"intervalChanged",args:[1,11,22]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[1,11,11,22]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls")}),test("evaluate -> afterEnd_ [once]",function(){var l,a,e=new Mock([11,22,33],null,0,null);Mock.calls=[],e.evaluate(33),l=Mock.calls[0],a={func:"afterEnd",args:[2,33,33]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(32),l=Mock.calls[0],a={func:"intervalChanged",args:[2,22,33]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[2,22,32,33]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(33),l=Mock.calls[0],a={func:"afterEnd",args:[2,33,33]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls")}),test("evaluate -> afterEnd_ [twice]",function(){var l,a,e=new Mock([11,22,33],null,0,null);Mock.calls=[],e.evaluate(33),l=Mock.calls[0],a={func:"afterEnd",args:[2,33,33]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(33),l=Mock.calls[0],a={func:"afterEnd",args:[2,33,33]},deepEqual(l,a,JSON.stringify(a)),ok(1===Mock.calls.length,"no further calls"),Mock.calls=[],e.evaluate(32),l=Mock.calls[0],a={func:"intervalChanged",args:[2,22,33]},deepEqual(l,a,JSON.stringify(a)),l=Mock.calls[1],a={func:"interpolate",args:[2,22,32,33]},deepEqual(l,a,JSON.stringify(a)),ok(2===Mock.calls.length,"no further calls")});