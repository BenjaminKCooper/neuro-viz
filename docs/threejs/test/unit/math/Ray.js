module("Ray"),test("constructor/equals",function(){var e=new THREE.Ray;ok(e.origin.equals(zero3),"Passed!"),ok(e.direction.equals(zero3),"Passed!"),e=new THREE.Ray(two3.clone(),one3.clone()),ok(e.origin.equals(two3),"Passed!"),ok(e.direction.equals(one3),"Passed!")}),test("copy/equals",function(){var e=new THREE.Ray(zero3.clone(),one3.clone()),n=(new THREE.Ray).copy(e);ok(n.origin.equals(zero3),"Passed!"),ok(n.direction.equals(one3),"Passed!"),e.origin=zero3,e.direction=one3,ok(n.origin.equals(zero3),"Passed!"),ok(n.direction.equals(one3),"Passed!")}),test("set",function(){var e=new THREE.Ray;e.set(one3,one3),ok(e.origin.equals(one3),"Passed!"),ok(e.direction.equals(one3),"Passed!")}),test("at",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1));ok(e.at(0).equals(one3),"Passed!"),ok(e.at(-1).equals(new THREE.Vector3(1,1,0)),"Passed!"),ok(e.at(1).equals(new THREE.Vector3(1,1,2)),"Passed!")}),test("recast/clone",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1));ok(e.recast(0).equals(e),"Passed!");var n=e.clone();ok(n.recast(-1).equals(new THREE.Ray(new THREE.Vector3(1,1,0),new THREE.Vector3(0,0,1))),"Passed!");var o=e.clone();ok(o.recast(1).equals(new THREE.Ray(new THREE.Vector3(1,1,2),new THREE.Vector3(0,0,1))),"Passed!");var t=e.clone(),s=t.clone().recast(1);ok(t.equals(e),"Passed!"),ok(!s.equals(t),"Passed!"),ok(s.equals(o),"Passed!")}),test("closestPointToPoint",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=e.closestPointToPoint(zero3);ok(n.equals(one3),"Passed!");var o=e.closestPointToPoint(new THREE.Vector3(0,0,50));ok(o.equals(new THREE.Vector3(1,1,50)),"Passed!");var t=e.closestPointToPoint(one3);ok(t.equals(one3),"Passed!")}),test("distanceToPoint",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=e.distanceToPoint(zero3);ok(n===Math.sqrt(3),"Passed!");var o=e.distanceToPoint(new THREE.Vector3(0,0,50));ok(o===Math.sqrt(2),"Passed!");var t=e.distanceToPoint(one3);ok(0===t,"Passed!")}),test("distanceSqToPoint",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=e.distanceSqToPoint(zero3);ok(3===n,"Passed!");var o=e.distanceSqToPoint(new THREE.Vector3(0,0,50));ok(2===o,"Passed!");var t=e.distanceSqToPoint(one3);ok(0===t,"Passed!")}),test("intersectsSphere",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=new THREE.Sphere(zero3,.5),o=new THREE.Sphere(zero3,1.5),t=new THREE.Sphere(one3,.1),s=new THREE.Sphere(two3,.1),a=new THREE.Sphere(two3,1);ok(!e.intersectsSphere(n),"Passed!"),ok(!e.intersectsSphere(o),"Passed!"),ok(e.intersectsSphere(t),"Passed!"),ok(!e.intersectsSphere(s),"Passed!"),ok(!e.intersectsSphere(a),"Passed!")}),test("intersectSphere",function(){var e=1e-4,n=new THREE.Ray(zero3.clone(),new THREE.Vector3(0,0,-1)),o=new THREE.Ray(one3.clone(),new THREE.Vector3(-1,0,0)),t=new THREE.Sphere(new THREE.Vector3(0,0,3),2);ok(null===n.intersectSphere(t),"Passed!");var t=new THREE.Sphere(new THREE.Vector3(3,0,-1),2);ok(null===n.intersectSphere(t),"Passed!");var t=new THREE.Sphere(new THREE.Vector3(1,-2,1),2);ok(null===o.intersectSphere(t),"Passed!");var t=new THREE.Sphere(new THREE.Vector3(-1,1,1),1);ok(o.intersectSphere(t).distanceTo(new THREE.Vector3(0,1,1))<e,"Passed!");var t=new THREE.Sphere(new THREE.Vector3(0,0,-2),1);ok(n.intersectSphere(t).distanceTo(new THREE.Vector3(0,0,-1))<e,"Passed!");var t=new THREE.Sphere(new THREE.Vector3(2,0,-1),2);ok(n.intersectSphere(t).distanceTo(new THREE.Vector3(0,0,-1))<e,"Passed!");var t=new THREE.Sphere(new THREE.Vector3(2.01,0,-1),2);ok(null===n.intersectSphere(t),"Passed!");var t=new THREE.Sphere(zero3.clone(),1);ok(n.intersectSphere(t).distanceTo(new THREE.Vector3(0,0,-1))<e,"Passed!");var t=new THREE.Sphere(new THREE.Vector3(0,0,1),4);ok(n.intersectSphere(t).distanceTo(new THREE.Vector3(0,0,-3))<e,"Passed!");var t=new THREE.Sphere(new THREE.Vector3(0,0,-1),4);ok(n.intersectSphere(t).distanceTo(new THREE.Vector3(0,0,-5))<e,"Passed!")}),test("intersectsPlane",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),one3.clone().sub(new THREE.Vector3(0,0,-1)));ok(e.intersectsPlane(n),"Passed!");var o=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),one3.clone().sub(new THREE.Vector3(0,0,0)));ok(e.intersectsPlane(o),"Passed!");var t=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),one3.clone().sub(new THREE.Vector3(0,0,1)));ok(!e.intersectsPlane(t),"Passed!");var s=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(1,0,0),one3);ok(e.intersectsPlane(s),"Passed!");var a=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(1,0,0),zero3);ok(!e.intersectsPlane(a),"Passed!")}),test("intersectPlane",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),new THREE.Vector3(1,1,-1));ok(null===e.intersectPlane(n),"Passed!");var o=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),new THREE.Vector3(1,1,0));ok(null===e.intersectPlane(o),"Passed!");var t=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(0,0,1),new THREE.Vector3(1,1,1));ok(e.intersectPlane(t).equals(e.origin),"Passed!");var s=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(1,0,0),one3);ok(e.intersectPlane(s).equals(e.origin),"Passed!");var a=(new THREE.Plane).setFromNormalAndCoplanarPoint(new THREE.Vector3(1,0,0),zero3);ok(null===e.intersectPlane(a),"Passed!")}),test("applyMatrix4",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=new THREE.Matrix4;ok(e.clone().applyMatrix4(n).equals(e),"Passed!"),e=new THREE.Ray(zero3.clone(),new THREE.Vector3(0,0,1)),n.makeRotationZ(Math.PI),ok(e.clone().applyMatrix4(n).equals(e),"Passed!"),n.makeRotationX(Math.PI);var o=e.clone();o.direction.negate();var t=e.clone().applyMatrix4(n);ok(t.origin.distanceTo(o.origin)<1e-4,"Passed!"),ok(t.direction.distanceTo(o.direction)<1e-4,"Passed!"),e.origin=new THREE.Vector3(0,0,1),o.origin=new THREE.Vector3(0,0,-1);var t=e.clone().applyMatrix4(n);ok(t.origin.distanceTo(o.origin)<1e-4,"Passed!"),ok(t.direction.distanceTo(o.direction)<1e-4,"Passed!")}),test("distanceSqToSegment",function(){var e=new THREE.Ray(one3.clone(),new THREE.Vector3(0,0,1)),n=new THREE.Vector3,o=new THREE.Vector3,t=new THREE.Vector3(3,5,50),s=new THREE.Vector3(50,50,50),a=e.distanceSqToSegment(t,s,n,o);ok(o.distanceTo(t)<1e-4,"Passed!"),ok(n.distanceTo(new THREE.Vector3(1,1,50))<1e-4,"Passed!"),ok(Math.abs(a-20)<1e-4,"Passed!"),t=new THREE.Vector3(-50,-50,-50),s=new THREE.Vector3(-3,-5,-4),a=e.distanceSqToSegment(t,s,n,o),ok(o.distanceTo(s)<1e-4,"Passed!"),ok(n.distanceTo(one3)<1e-4,"Passed!"),ok(Math.abs(a-77)<1e-4,"Passed!"),t=new THREE.Vector3(-50,-50,-50),s=new THREE.Vector3(50,50,50),a=e.distanceSqToSegment(t,s,n,o),ok(o.distanceTo(one3)<1e-4,"Passed!"),ok(n.distanceTo(one3)<1e-4,"Passed!"),ok(a<1e-4,"Passed!")}),test("intersectBox",function(){var e=1e-4,n=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),o=new THREE.Ray(new THREE.Vector3(-2,0,0),new THREE.Vector3(1,0,0));ok(o.intersectsBox(n)===!0,"Passed!"),ok(o.intersectBox(n).distanceTo(new THREE.Vector3(-1,0,0))<e,"Passed!");var t=new THREE.Ray(new THREE.Vector3(-2,0,0),new THREE.Vector3(-1,0,0));ok(t.intersectsBox(n)===!1,"Passed!"),ok(null===t.intersectBox(n),"Passed!");var s=new THREE.Ray(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0));ok(s.intersectsBox(n)===!0,"Passed!"),ok(s.intersectBox(n).distanceTo(new THREE.Vector3(1,0,0))<e,"Passed!");var a=new THREE.Ray(new THREE.Vector3(0,2,1),new THREE.Vector3(0,-1,-1).normalize());ok(a.intersectsBox(n)===!0,"Passed!"),ok(a.intersectBox(n).distanceTo(new THREE.Vector3(0,1,0))<e,"Passed!");var r=new THREE.Ray(new THREE.Vector3(1,-2,1),new THREE.Vector3(0,1,0).normalize());ok(r.intersectsBox(n)===!0,"Passed!"),ok(r.intersectBox(n).distanceTo(new THREE.Vector3(1,-1,1))<e,"Passed!");var E=new THREE.Ray(new THREE.Vector3(1,-2,0),new THREE.Vector3(0,-1,0).normalize());ok(E.intersectsBox(n)===!1,"Passed!"),ok(null==E.intersectBox(n),"Passed!")});