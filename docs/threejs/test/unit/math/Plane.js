module("Plane");var comparePlane=function(e,n,o){return o=o||1e-4,e.normal.distanceTo(n.normal)<o&&Math.abs(e.constant-n.constant)<o};test("constructor",function(){var e=new THREE.Plane;ok(1==e.normal.x,"Passed!"),ok(0==e.normal.y,"Passed!"),ok(0==e.normal.z,"Passed!"),ok(0==e.constant,"Passed!"),e=new THREE.Plane(one3.clone(),0),ok(1==e.normal.x,"Passed!"),ok(1==e.normal.y,"Passed!"),ok(1==e.normal.z,"Passed!"),ok(0==e.constant,"Passed!"),e=new THREE.Plane(one3.clone(),1),ok(1==e.normal.x,"Passed!"),ok(1==e.normal.y,"Passed!"),ok(1==e.normal.z,"Passed!"),ok(1==e.constant,"Passed!")}),test("copy",function(){var e=new THREE.Plane(new THREE.Vector3(x,y,z),w),n=(new THREE.Plane).copy(e);ok(n.normal.x==x,"Passed!"),ok(n.normal.y==y,"Passed!"),ok(n.normal.z==z,"Passed!"),ok(n.constant==w,"Passed!"),e.normal.x=0,e.normal.y=-1,e.normal.z=-2,e.constant=-3,ok(n.normal.x==x,"Passed!"),ok(n.normal.y==y,"Passed!"),ok(n.normal.z==z,"Passed!"),ok(n.constant==w,"Passed!")}),test("set",function(){var e=new THREE.Plane;ok(1==e.normal.x,"Passed!"),ok(0==e.normal.y,"Passed!"),ok(0==e.normal.z,"Passed!"),ok(0==e.constant,"Passed!");var n=e.clone().set(new THREE.Vector3(x,y,z),w);ok(n.normal.x==x,"Passed!"),ok(n.normal.y==y,"Passed!"),ok(n.normal.z==z,"Passed!"),ok(n.constant==w,"Passed!")}),test("setComponents",function(){var e=new THREE.Plane;ok(1==e.normal.x,"Passed!"),ok(0==e.normal.y,"Passed!"),ok(0==e.normal.z,"Passed!"),ok(0==e.constant,"Passed!");var n=e.clone().setComponents(x,y,z,w);ok(n.normal.x==x,"Passed!"),ok(n.normal.y==y,"Passed!"),ok(n.normal.z==z,"Passed!"),ok(n.constant==w,"Passed!")}),test("setFromNormalAndCoplanarPoint",function(){var e=one3.clone().normalize(),n=(new THREE.Plane).setFromNormalAndCoplanarPoint(e,zero3);ok(n.normal.equals(e),"Passed!"),ok(0==n.constant,"Passed!")}),test("normalize",function(){var e=new THREE.Plane(new THREE.Vector3(2,0,0),2);e.normalize(),ok(1==e.normal.length(),"Passed!"),ok(e.normal.equals(new THREE.Vector3(1,0,0)),"Passed!"),ok(1==e.constant,"Passed!")}),test("negate/distanceToPoint",function(){var e=new THREE.Plane(new THREE.Vector3(2,0,0),-2);e.normalize(),ok(3===e.distanceToPoint(new THREE.Vector3(4,0,0)),"Passed!"),ok(0===e.distanceToPoint(new THREE.Vector3(1,0,0)),"Passed!"),e.negate(),ok(e.distanceToPoint(new THREE.Vector3(4,0,0))===-3,"Passed!"),ok(0===e.distanceToPoint(new THREE.Vector3(1,0,0)),"Passed!")}),test("distanceToPoint",function(){var e=new THREE.Plane(new THREE.Vector3(2,0,0),-2);e.normalize(),ok(0===e.distanceToPoint(e.projectPoint(zero3.clone())),"Passed!"),ok(3===e.distanceToPoint(new THREE.Vector3(4,0,0)),"Passed!")}),test("distanceToSphere",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0),n=new THREE.Sphere(new THREE.Vector3(2,0,0),1);ok(1===e.distanceToSphere(n),"Passed!"),e.set(new THREE.Vector3(1,0,0),2),ok(3===e.distanceToSphere(n),"Passed!"),e.set(new THREE.Vector3(1,0,0),-2),ok(e.distanceToSphere(n)===-1,"Passed!")}),test("isInterestionLine/intersectLine",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0),n=new THREE.Line3(new THREE.Vector3(-10,0,0),new THREE.Vector3(10,0,0));ok(e.intersectsLine(n),"Passed!"),ok(e.intersectLine(n).equals(new THREE.Vector3(0,0,0)),"Passed!"),e=new THREE.Plane(new THREE.Vector3(1,0,0),-3),ok(e.intersectsLine(n),"Passed!"),ok(e.intersectLine(n).equals(new THREE.Vector3(3,0,0)),"Passed!"),e=new THREE.Plane(new THREE.Vector3(1,0,0),-11),ok(!e.intersectsLine(n),"Passed!"),ok(void 0===e.intersectLine(n),"Passed!"),e=new THREE.Plane(new THREE.Vector3(1,0,0),11),ok(!e.intersectsLine(n),"Passed!"),ok(void 0===e.intersectLine(n),"Passed!")}),test("projectPoint",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0);ok(e.projectPoint(new THREE.Vector3(10,0,0)).equals(zero3),"Passed!"),ok(e.projectPoint(new THREE.Vector3(-10,0,0)).equals(zero3),"Passed!"),e=new THREE.Plane(new THREE.Vector3(0,1,0),-1),ok(e.projectPoint(new THREE.Vector3(0,0,0)).equals(new THREE.Vector3(0,1,0)),"Passed!"),ok(e.projectPoint(new THREE.Vector3(0,1,0)).equals(new THREE.Vector3(0,1,0)),"Passed!")}),test("orthoPoint",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0);ok(e.orthoPoint(new THREE.Vector3(10,0,0)).equals(new THREE.Vector3(10,0,0)),"Passed!"),ok(e.orthoPoint(new THREE.Vector3(-10,0,0)).equals(new THREE.Vector3(-10,0,0)),"Passed!")}),test("coplanarPoint",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0);ok(0===e.distanceToPoint(e.coplanarPoint()),"Passed!"),e=new THREE.Plane(new THREE.Vector3(0,1,0),-1),ok(0===e.distanceToPoint(e.coplanarPoint()),"Passed!")}),test("applyMatrix4/translate",function(){var e=new THREE.Plane(new THREE.Vector3(1,0,0),0),n=new THREE.Matrix4;n.makeRotationZ(.5*Math.PI),ok(comparePlane(e.clone().applyMatrix4(n),new THREE.Plane(new THREE.Vector3(0,1,0),0)),"Passed!"),e=new THREE.Plane(new THREE.Vector3(0,1,0),-1),ok(comparePlane(e.clone().applyMatrix4(n),new THREE.Plane(new THREE.Vector3(-1,0,0),-1)),"Passed!"),n.makeTranslation(1,1,1),ok(comparePlane(e.clone().applyMatrix4(n),e.clone().translate(new THREE.Vector3(1,1,1))),"Passed!")});