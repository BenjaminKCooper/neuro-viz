module("Vector2"),test("constructor",function(){var e=new THREE.Vector2;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),e=new THREE.Vector2(x,y),ok(e.x===x,"Passed!"),ok(e.y===y,"Passed!")}),test("copy",function(){var e=new THREE.Vector2(x,y),o=(new THREE.Vector2).copy(e);ok(o.x==x,"Passed!"),ok(o.y==y,"Passed!"),e.x=0,e.y=-1,ok(o.x==x,"Passed!"),ok(o.y==y,"Passed!")}),test("set",function(){var e=new THREE.Vector2;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),e.set(x,y),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!")}),test("setX,setY",function(){var e=new THREE.Vector2;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),e.setX(x),e.setY(y),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!")}),test("setComponent,getComponent",function(){var e=new THREE.Vector2;ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!"),e.setComponent(0,1),e.setComponent(1,2),ok(1==e.getComponent(0),"Passed!"),ok(2==e.getComponent(1),"Passed!")}),test("add",function(){var e=new THREE.Vector2(x,y),o=new THREE.Vector2(-x,-y);e.add(o),ok(0==e.x,"Passed!"),ok(0==e.y,"Passed!");var s=(new THREE.Vector2).addVectors(o,o);ok(s.x==-2*x,"Passed!"),ok(s.y==-2*y,"Passed!")}),test("sub",function(){var e=new THREE.Vector2(x,y),o=new THREE.Vector2(-x,-y);e.sub(o),ok(e.x==2*x,"Passed!"),ok(e.y==2*y,"Passed!");var s=(new THREE.Vector2).subVectors(e,e);ok(0==s.x,"Passed!"),ok(0==s.y,"Passed!")}),test("multiply/divide",function(){var e=new THREE.Vector2(x,y),o=new THREE.Vector2(-x,-y);e.multiplyScalar(-2),ok(e.x==x*-2,"Passed!"),ok(e.y==y*-2,"Passed!"),o.multiplyScalar(-2),ok(o.x==2*x,"Passed!"),ok(o.y==2*y,"Passed!"),e.divideScalar(-2),ok(e.x==x,"Passed!"),ok(e.y==y,"Passed!"),o.divideScalar(-2),ok(o.x==-x,"Passed!"),ok(o.y==-y,"Passed!")}),test("min/max/clamp",function(){var e=new THREE.Vector2(x,y),o=new THREE.Vector2(-x,-y),s=new THREE.Vector2;s.copy(e).min(o),ok(s.x==-x,"Passed!"),ok(s.y==-y,"Passed!"),s.copy(e).max(o),ok(s.x==x,"Passed!"),ok(s.y==y,"Passed!"),s.set(-2*x,2*y),s.clamp(o,e),ok(s.x==-x,"Passed!"),ok(s.y==y,"Passed!"),s.set(-2*x,2*x),s.clampScalar(-x,x),equal(s.x,-x,"scalar clamp x"),equal(s.y,x,"scalar clamp y")}),test("rounding",function(){deepEqual(new THREE.Vector2(-.1,.1).floor(),new THREE.Vector2(-1,0),"floor .1"),deepEqual(new THREE.Vector2(-.5,.5).floor(),new THREE.Vector2(-1,0),"floor .5"),deepEqual(new THREE.Vector2(-.9,.9).floor(),new THREE.Vector2(-1,0),"floor .9"),deepEqual(new THREE.Vector2(-.1,.1).ceil(),new THREE.Vector2(0,1),"ceil .1"),deepEqual(new THREE.Vector2(-.5,.5).ceil(),new THREE.Vector2(0,1),"ceil .5"),deepEqual(new THREE.Vector2(-.9,.9).ceil(),new THREE.Vector2(0,1),"ceil .9"),deepEqual(new THREE.Vector2(-.1,.1).round(),new THREE.Vector2(0,0),"round .1"),deepEqual(new THREE.Vector2(-.5,.5).round(),new THREE.Vector2(0,1),"round .5"),deepEqual(new THREE.Vector2(-.9,.9).round(),new THREE.Vector2(-1,1),"round .9"),deepEqual(new THREE.Vector2(-.1,.1).roundToZero(),new THREE.Vector2(0,0),"roundToZero .1"),deepEqual(new THREE.Vector2(-.5,.5).roundToZero(),new THREE.Vector2(0,0),"roundToZero .5"),deepEqual(new THREE.Vector2(-.9,.9).roundToZero(),new THREE.Vector2(0,0),"roundToZero .9"),deepEqual(new THREE.Vector2(-1.1,1.1).roundToZero(),new THREE.Vector2(-1,1),"roundToZero 1.1"),deepEqual(new THREE.Vector2(-1.5,1.5).roundToZero(),new THREE.Vector2(-1,1),"roundToZero 1.5"),deepEqual(new THREE.Vector2(-1.9,1.9).roundToZero(),new THREE.Vector2(-1,1),"roundToZero 1.9")}),test("negate",function(){var e=new THREE.Vector2(x,y);e.negate(),ok(e.x==-x,"Passed!"),ok(e.y==-y,"Passed!")}),test("dot",function(){var e=new THREE.Vector2(x,y),o=new THREE.Vector2(-x,-y),s=new THREE.Vector2,t=e.dot(o);ok(t==-x*x-y*y,"Passed!"),t=e.dot(s),ok(0==t,"Passed!")}),test("length/lengthSq",function(){var e=new THREE.Vector2(x,0),o=new THREE.Vector2(0,-y),s=new THREE.Vector2;ok(e.length()==x,"Passed!"),ok(e.lengthSq()==x*x,"Passed!"),ok(o.length()==y,"Passed!"),ok(o.lengthSq()==y*y,"Passed!"),ok(0==s.length(),"Passed!"),ok(0==s.lengthSq(),"Passed!"),e.set(x,y),ok(e.length()==Math.sqrt(x*x+y*y),"Passed!"),ok(e.lengthSq()==x*x+y*y,"Passed!")}),test("normalize",function(){var e=new THREE.Vector2(x,0),o=new THREE.Vector2(0,-y);new THREE.Vector2;e.normalize(),ok(1==e.length(),"Passed!"),ok(1==e.x,"Passed!"),o.normalize(),ok(1==o.length(),"Passed!"),ok(o.y==-1,"Passed!")}),test("distanceTo/distanceToSquared",function(){var e=new THREE.Vector2(x,0),o=new THREE.Vector2(0,-y),s=new THREE.Vector2;ok(e.distanceTo(s)==x,"Passed!"),ok(e.distanceToSquared(s)==x*x,"Passed!"),ok(o.distanceTo(s)==y,"Passed!"),ok(o.distanceToSquared(s)==y*y,"Passed!")}),test("setLength",function(){var e=new THREE.Vector2(x,0);ok(e.length()==x,"Passed!"),e.setLength(y),ok(e.length()==y,"Passed!"),e=new THREE.Vector2(0,0),ok(0==e.length(),"Passed!"),e.setLength(y),ok(0==e.length(),"Passed!")}),test("lerp/clone",function(){var e=new THREE.Vector2(x,0),o=new THREE.Vector2(0,-y);ok(e.lerp(e,0).equals(e.lerp(e,.5)),"Passed!"),ok(e.lerp(e,0).equals(e.lerp(e,1)),"Passed!"),ok(e.clone().lerp(o,0).equals(e),"Passed!"),ok(e.clone().lerp(o,.5).x==.5*x,"Passed!"),ok(e.clone().lerp(o,.5).y==.5*-y,"Passed!"),ok(e.clone().lerp(o,1).equals(o),"Passed!")}),test("equals",function(){var e=new THREE.Vector2(x,0),o=new THREE.Vector2(0,-y);ok(e.x!=o.x,"Passed!"),ok(e.y!=o.y,"Passed!"),ok(!e.equals(o),"Passed!"),ok(!o.equals(e),"Passed!"),e.copy(o),ok(e.x==o.x,"Passed!"),ok(e.y==o.y,"Passed!"),ok(e.equals(o),"Passed!"),ok(o.equals(e),"Passed!")});