module("Box2"),test("constructor",function(){var e=new THREE.Box2;ok(e.min.equals(posInf2),"Passed!"),ok(e.max.equals(negInf2),"Passed!"),e=new THREE.Box2(zero2.clone(),zero2.clone()),ok(e.min.equals(zero2),"Passed!"),ok(e.max.equals(zero2),"Passed!"),e=new THREE.Box2(zero2.clone(),one2.clone()),ok(e.min.equals(zero2),"Passed!"),ok(e.max.equals(one2),"Passed!")}),test("copy",function(){var e=new THREE.Box2(zero2.clone(),one2.clone()),o=(new THREE.Box2).copy(e);ok(o.min.equals(zero2),"Passed!"),ok(o.max.equals(one2),"Passed!"),e.min=zero2,e.max=one2,ok(o.min.equals(zero2),"Passed!"),ok(o.max.equals(one2),"Passed!")}),test("set",function(){var e=new THREE.Box2;e.set(zero2,one2),ok(e.min.equals(zero2),"Passed!"),ok(e.max.equals(one2),"Passed!")}),test("setFromPoints",function(){var e=new THREE.Box2;e.setFromPoints([zero2,one2,two2]),ok(e.min.equals(zero2),"Passed!"),ok(e.max.equals(two2),"Passed!"),e.setFromPoints([one2]),ok(e.min.equals(one2),"Passed!"),ok(e.max.equals(one2),"Passed!"),e.setFromPoints([]),ok(e.isEmpty(),"Passed!")}),test("empty/makeEmpty",function(){var e=new THREE.Box2;ok(e.isEmpty(),"Passed!");var e=new THREE.Box2(zero2.clone(),one2.clone());ok(!e.isEmpty(),"Passed!"),e.makeEmpty(),ok(e.isEmpty(),"Passed!")}),test("getCenter",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());ok(e.getCenter().equals(zero2),"Passed!"),e=new THREE.Box2(zero2,one2);var o=one2.clone().multiplyScalar(.5);ok(e.getCenter().equals(o),"Passed!")}),test("getSize",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());ok(e.getSize().equals(zero2),"Passed!"),e=new THREE.Box2(zero2.clone(),one2.clone()),ok(e.getSize().equals(one2),"Passed!")}),test("expandByPoint",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());e.expandByPoint(zero2),ok(e.getSize().equals(zero2),"Passed!"),e.expandByPoint(one2),ok(e.getSize().equals(one2),"Passed!"),e.expandByPoint(one2.clone().negate()),ok(e.getSize().equals(one2.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero2),"Passed!")}),test("expandByVector",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());e.expandByVector(zero2),ok(e.getSize().equals(zero2),"Passed!"),e.expandByVector(one2),ok(e.getSize().equals(one2.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero2),"Passed!")}),test("expandByScalar",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());e.expandByScalar(0),ok(e.getSize().equals(zero2),"Passed!"),e.expandByScalar(1),ok(e.getSize().equals(one2.clone().multiplyScalar(2)),"Passed!"),ok(e.getCenter().equals(zero2),"Passed!")}),test("containsPoint",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone());ok(e.containsPoint(zero2),"Passed!"),ok(!e.containsPoint(one2),"Passed!"),e.expandByScalar(1),ok(e.containsPoint(zero2),"Passed!"),ok(e.containsPoint(one2),"Passed!"),ok(e.containsPoint(one2.clone().negate()),"Passed!")}),test("containsBox",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(zero2.clone(),one2.clone()),n=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.containsBox(e),"Passed!"),ok(!e.containsBox(o),"Passed!"),ok(!e.containsBox(n),"Passed!"),ok(o.containsBox(e),"Passed!"),ok(n.containsBox(e),"Passed!"),ok(!o.containsBox(n),"Passed!")}),test("getParameter",function(){var e=new THREE.Box2(zero2.clone(),one2.clone()),o=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.getParameter(new THREE.Vector2(0,0)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(e.getParameter(new THREE.Vector2(1,1)).equals(new THREE.Vector2(1,1)),"Passed!"),ok(o.getParameter(new THREE.Vector2(-1,-1)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(o.getParameter(new THREE.Vector2(0,0)).equals(new THREE.Vector2(.5,.5)),"Passed!"),ok(o.getParameter(new THREE.Vector2(1,1)).equals(new THREE.Vector2(1,1)),"Passed!")}),test("clampPoint",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.clampPoint(new THREE.Vector2(0,0)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(e.clampPoint(new THREE.Vector2(1,1)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(e.clampPoint(new THREE.Vector2(-1,-1)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(o.clampPoint(new THREE.Vector2(2,2)).equals(new THREE.Vector2(1,1)),"Passed!"),ok(o.clampPoint(new THREE.Vector2(1,1)).equals(new THREE.Vector2(1,1)),"Passed!"),ok(o.clampPoint(new THREE.Vector2(0,0)).equals(new THREE.Vector2(0,0)),"Passed!"),ok(o.clampPoint(new THREE.Vector2(-1,-1)).equals(new THREE.Vector2(-1,-1)),"Passed!"),ok(o.clampPoint(new THREE.Vector2(-2,-2)).equals(new THREE.Vector2(-1,-1)),"Passed!")}),test("distanceToPoint",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(one2.clone().negate(),one2.clone());ok(0==e.distanceToPoint(new THREE.Vector2(0,0)),"Passed!"),ok(e.distanceToPoint(new THREE.Vector2(1,1))==Math.sqrt(2),"Passed!"),ok(e.distanceToPoint(new THREE.Vector2(-1,-1))==Math.sqrt(2),"Passed!"),ok(o.distanceToPoint(new THREE.Vector2(2,2))==Math.sqrt(2),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector2(1,1)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector2(0,0)),"Passed!"),ok(0==o.distanceToPoint(new THREE.Vector2(-1,-1)),"Passed!"),ok(o.distanceToPoint(new THREE.Vector2(-2,-2))==Math.sqrt(2),"Passed!")}),test("intersectsBox",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(zero2.clone(),one2.clone()),n=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.intersectsBox(e),"Passed!"),ok(e.intersectsBox(o),"Passed!"),ok(e.intersectsBox(n),"Passed!"),ok(o.intersectsBox(e),"Passed!"),ok(n.intersectsBox(e),"Passed!"),ok(o.intersectsBox(n),"Passed!"),o.translate(new THREE.Vector2(2,2)),ok(!e.intersectsBox(o),"Passed!"),ok(!o.intersectsBox(e),"Passed!"),ok(!o.intersectsBox(n),"Passed!")}),test("intersect",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(zero2.clone(),one2.clone()),n=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.clone().intersect(e).equals(e),"Passed!"),ok(e.clone().intersect(o).equals(e),"Passed!"),ok(o.clone().intersect(o).equals(o),"Passed!"),ok(e.clone().intersect(n).equals(e),"Passed!"),ok(o.clone().intersect(n).equals(o),"Passed!"),ok(n.clone().intersect(n).equals(n),"Passed!")}),test("union",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(zero2.clone(),one2.clone()),n=new THREE.Box2(one2.clone().negate(),one2.clone());ok(e.clone().union(e).equals(e),"Passed!"),ok(e.clone().union(o).equals(o),"Passed!"),ok(e.clone().union(n).equals(n),"Passed!"),ok(o.clone().union(n).equals(n),"Passed!")}),test("translate",function(){var e=new THREE.Box2(zero2.clone(),zero2.clone()),o=new THREE.Box2(zero2.clone(),one2.clone()),n=(new THREE.Box2(one2.clone().negate(),one2.clone()),new THREE.Box2(one2.clone().negate(),zero2.clone()));ok(e.clone().translate(one2).equals(new THREE.Box2(one2,one2)),"Passed!"),ok(e.clone().translate(one2).translate(one2.clone().negate()).equals(e),"Passed!"),ok(n.clone().translate(one2).equals(o),"Passed!"),ok(o.clone().translate(one2.clone().negate()).equals(n),"Passed!")});