module("Matrix4");var matrixEquals4=function(e,t,n){if(n=n||1e-4,e.elements.length!=t.elements.length)return!1;for(var s=0,o=e.elements.length;s<o;s++){var a=e.elements[s]-t.elements[s];if(a>n)return!1}return!0};test("constructor",function(){var e=new THREE.Matrix4;ok(1==e.determinant(),"Passed!");var t=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);ok(0==t.elements[0]),ok(4==t.elements[1]),ok(8==t.elements[2]),ok(12==t.elements[3]),ok(1==t.elements[4]),ok(5==t.elements[5]),ok(9==t.elements[6]),ok(13==t.elements[7]),ok(2==t.elements[8]),ok(6==t.elements[9]),ok(10==t.elements[10]),ok(14==t.elements[11]),ok(3==t.elements[12]),ok(7==t.elements[13]),ok(11==t.elements[14]),ok(15==t.elements[15]),ok(!matrixEquals4(e,t),"Passed!")}),test("copy",function(){var e=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),t=(new THREE.Matrix4).copy(e);ok(matrixEquals4(e,t),"Passed!"),e.elements[0]=2,ok(!matrixEquals4(e,t),"Passed!")}),test("set",function(){var e=new THREE.Matrix4;ok(1==e.determinant(),"Passed!"),e.set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),ok(0==e.elements[0]),ok(4==e.elements[1]),ok(8==e.elements[2]),ok(12==e.elements[3]),ok(1==e.elements[4]),ok(5==e.elements[5]),ok(9==e.elements[6]),ok(13==e.elements[7]),ok(2==e.elements[8]),ok(6==e.elements[9]),ok(10==e.elements[10]),ok(14==e.elements[11]),ok(3==e.elements[12]),ok(7==e.elements[13]),ok(11==e.elements[14]),ok(15==e.elements[15])}),test("identity",function(){var e=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);ok(0==e.elements[0]),ok(4==e.elements[1]),ok(8==e.elements[2]),ok(12==e.elements[3]),ok(1==e.elements[4]),ok(5==e.elements[5]),ok(9==e.elements[6]),ok(13==e.elements[7]),ok(2==e.elements[8]),ok(6==e.elements[9]),ok(10==e.elements[10]),ok(14==e.elements[11]),ok(3==e.elements[12]),ok(7==e.elements[13]),ok(11==e.elements[14]),ok(15==e.elements[15]);var t=new THREE.Matrix4;ok(!matrixEquals4(t,e),"Passed!"),e.identity(),ok(matrixEquals4(t,e),"Passed!")}),test("multiplyScalar",function(){var e=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);ok(0==e.elements[0]),ok(4==e.elements[1]),ok(8==e.elements[2]),ok(12==e.elements[3]),ok(1==e.elements[4]),ok(5==e.elements[5]),ok(9==e.elements[6]),ok(13==e.elements[7]),ok(2==e.elements[8]),ok(6==e.elements[9]),ok(10==e.elements[10]),ok(14==e.elements[11]),ok(3==e.elements[12]),ok(7==e.elements[13]),ok(11==e.elements[14]),ok(15==e.elements[15]),e.multiplyScalar(2),ok(0==e.elements[0]),ok(8==e.elements[1]),ok(16==e.elements[2]),ok(24==e.elements[3]),ok(2==e.elements[4]),ok(10==e.elements[5]),ok(18==e.elements[6]),ok(26==e.elements[7]),ok(4==e.elements[8]),ok(12==e.elements[9]),ok(20==e.elements[10]),ok(28==e.elements[11]),ok(6==e.elements[12]),ok(14==e.elements[13]),ok(22==e.elements[14]),ok(30==e.elements[15])}),test("determinant",function(){var e=new THREE.Matrix4;ok(1==e.determinant(),"Passed!"),e.elements[0]=2,ok(2==e.determinant(),"Passed!"),e.elements[0]=0,ok(0==e.determinant(),"Passed!"),e.set(2,3,4,5,-1,-21,-3,-4,6,7,8,10,-8,-9,-10,-12),ok(76==e.determinant(),"Passed!")}),test("getInverse",function(){var e=new THREE.Matrix4,t=new THREE.Matrix4,n=(new THREE.Matrix4).set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),s=(new THREE.Matrix4).set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);ok(!matrixEquals4(t,n),"Passed!"),n.getInverse(t,!1),ok(matrixEquals4(n,new THREE.Matrix4),"Passed!");try{n.getInverse(s,!0),ok(!1,"Passed!")}catch(e){ok(!0,"Passed!")}for(var o=[(new THREE.Matrix4).makeRotationX(.3),(new THREE.Matrix4).makeRotationX(-.3),(new THREE.Matrix4).makeRotationY(.3),(new THREE.Matrix4).makeRotationY(-.3),(new THREE.Matrix4).makeRotationZ(.3),(new THREE.Matrix4).makeRotationZ(-.3),(new THREE.Matrix4).makeScale(1,2,3),(new THREE.Matrix4).makeScale(1/8,.5,1/3),(new THREE.Matrix4).makeFrustum(-1,1,-1,1,1,1e3),(new THREE.Matrix4).makeFrustum(-16,16,-9,9,.1,1e4),(new THREE.Matrix4).makeTranslation(1,2,3)],a=0,r=o.length;a<r;a++){var E=o[a],m=(new THREE.Matrix4).getInverse(E),l=E.clone();l.getInverse(l),ok(matrixEquals4(l,m),"Passed!"),ok(Math.abs(E.determinant()*m.determinant()-1)<1e-4,"Passed!");var k=(new THREE.Matrix4).multiplyMatrices(E,m);ok(Math.abs(k.determinant()-1)<1e-4,"Passed!"),ok(matrixEquals4(k,e),"Passed!")}}),test("makeBasis/extractBasis",function(){var e=[new THREE.Vector3(1,0,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1)],t=(new THREE.Matrix4).makeBasis(e[0],e[1],e[2]),n=new THREE.Matrix4;ok(matrixEquals4(t,n),"Passed!");for(var s=[[new THREE.Vector3(0,1,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1)]],o=0;o<s.length;o++){var a=s[o],r=(new THREE.Matrix4).makeBasis(a[0],a[1],a[2]),E=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];r.extractBasis(E[0],E[1],E[2]);for(var m=0;m<E.length;m++)ok(E[m].equals(a[m]),"Passed!");for(var m=0;m<e.length;m++)E[m].copy(e[m]),E[m].applyMatrix4(r);for(var m=0;m<E.length;m++)ok(E[m].equals(a[m]),"Passed!")}}),test("transpose",function(){var e=new THREE.Matrix4,t=e.clone().transpose();ok(matrixEquals4(e,t),"Passed!"),t=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);var n=t.clone().transpose();ok(!matrixEquals4(t,n),"Passed!"),n.transpose(),ok(matrixEquals4(t,n),"Passed!")}),test("clone",function(){var e=(new THREE.Matrix4).set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),t=e.clone();ok(matrixEquals4(e,t),"Passed!"),e.elements[0]=2,ok(!matrixEquals4(e,t),"Passed!")}),test("compose/decompose",function(){for(var e=[new THREE.Vector3,new THREE.Vector3(3,0,0),new THREE.Vector3(0,4,0),new THREE.Vector3(0,0,5),new THREE.Vector3(-6,0,0),new THREE.Vector3(0,-7,0),new THREE.Vector3(0,0,-8),new THREE.Vector3(-2,5,-9),new THREE.Vector3(-2,-5,-9)],t=[new THREE.Vector3(1,1,1),new THREE.Vector3(2,2,2),new THREE.Vector3(1,-1,1),new THREE.Vector3(-1,1,1),new THREE.Vector3(1,1,-1),new THREE.Vector3(2,-2,1),new THREE.Vector3(-1,2,-2),new THREE.Vector3(-1,-1,-1),new THREE.Vector3(-2,-2,-2)],n=[new THREE.Quaternion,(new THREE.Quaternion).setFromEuler(new THREE.Euler(1,1,0)),(new THREE.Quaternion).setFromEuler(new THREE.Euler(1,-1,1)),new THREE.Quaternion(0,.9238795292366128,0,.38268342717215614)],s=0;s<e.length;s++)for(var o=0;o<t.length;o++)for(var a=0;a<n.length;a++){var r=e[s],E=t[o],m=n[a],l=(new THREE.Matrix4).compose(r,m,E),k=new THREE.Vector3,i=new THREE.Quaternion,R=new THREE.Vector3;l.decompose(k,i,R);var T=(new THREE.Matrix4).compose(k,i,R);matrixEquals4(l,T);ok(matrixEquals4(l,T),"Passed!")}});