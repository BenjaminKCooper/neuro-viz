THREE.ReflectNode=function(e){THREE.TempNode.call(this,"v3",{unique:!0}),this.scope=e||THREE.ReflectNode.CUBE},THREE.ReflectNode.CUBE="cube",THREE.ReflectNode.SPHERE="sphere",THREE.ReflectNode.VECTOR="vector",THREE.ReflectNode.prototype=Object.create(THREE.TempNode.prototype),THREE.ReflectNode.prototype.constructor=THREE.ReflectNode,THREE.ReflectNode.prototype.getType=function(e){switch(this.scope){case THREE.ReflectNode.SPHERE:return"v2"}return this.type},THREE.ReflectNode.prototype.generate=function(e,t){var c;switch(this.scope){case THREE.ReflectNode.VECTOR:e.material.addFragmentNode("vec3 reflectVec = inverseTransformDirection( reflect( -normalize( vViewPosition ), normal ), viewMatrix );"),c="reflectVec";break;case THREE.ReflectNode.CUBE:var E=new THREE.ReflectNode(THREE.ReflectNode.VECTOR).build(e,"v3");e.material.addFragmentNode("vec3 reflectCubeVec = vec3( -1.0 * "+E+".x, "+E+".yz );"),c="reflectCubeVec";break;case THREE.ReflectNode.SPHERE:var E=new THREE.ReflectNode(THREE.ReflectNode.VECTOR).build(e,"v3");e.material.addFragmentNode("vec2 reflectSphereVec = normalize((viewMatrix * vec4("+E+", 0.0 )).xyz + vec3(0.0,0.0,1.0)).xy * 0.5 + 0.5;"),c="reflectSphereVec"}return e.format(c,this.getType(this.type),t)};