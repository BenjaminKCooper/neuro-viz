THREE.PhongNode=function(){THREE.GLNode.call(this),this.color=new THREE.ColorNode(15658734),this.specular=new THREE.ColorNode(1118481),this.shininess=new THREE.FloatNode(30)},THREE.PhongNode.prototype=Object.create(THREE.GLNode.prototype),THREE.PhongNode.prototype.constructor=THREE.PhongNode,THREE.PhongNode.prototype.build=function(e){var t,r=e.material;if(r.define("PHONG"),r.define("ALPHATEST","0.0"),r.requestAttribs.light=!0,e.isShader("vertex")){var i=this.transform?this.transform.parseAndBuildCode(e,"v3",{cache:"transform"}):void 0;r.mergeUniform(THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights])),r.addVertexPars(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex].join("\n"));var s=[THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex];i&&s.push(i.code,"transformed = "+i.result+";"),s.push(THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex),t=s.join("\n")}else{this.color.parse(e,{slot:"color"}),this.specular.parse(e),this.shininess.parse(e),this.alpha&&this.alpha.parse(e),this.normal&&this.normal.parse(e),this.normalScale&&this.normal&&this.normalScale.parse(e),this.light&&this.light.parse(e,{cache:"light"}),this.ao&&this.ao.parse(e),this.ambient&&this.ambient.parse(e),this.shadow&&this.shadow.parse(e),this.emissive&&this.emissive.parse(e,{slot:"emissive"}),this.environment&&this.environment.parse(e,{slot:"environment"}),this.environmentAlpha&&this.environment&&this.environmentAlpha.parse(e);var h=this.color.buildCode(e,"c",{slot:"color"}),o=this.specular.buildCode(e,"c"),n=this.shininess.buildCode(e,"fv1"),a=this.alpha?this.alpha.buildCode(e,"fv1"):void 0,d=this.normal?this.normal.buildCode(e,"v3"):void 0,l=this.normalScale&&this.normal?this.normalScale.buildCode(e,"v2"):void 0,u=this.light?this.light.buildCode(e,"v3",{cache:"light"}):void 0,c=this.ao?this.ao.buildCode(e,"fv1"):void 0,E=this.ambient?this.ambient.buildCode(e,"c"):void 0,p=this.shadow?this.shadow.buildCode(e,"c"):void 0,m=this.emissive?this.emissive.buildCode(e,"c",{slot:"emissive"}):void 0,f=this.environment?this.environment.buildCode(e,"c",{slot:"environment"}):void 0,g=this.environmentAlpha&&this.environment?this.environmentAlpha.buildCode(e,"fv1"):void 0;r.requestAttribs.transparent=void 0!=a,r.addFragmentPars([THREE.ShaderChunk.common,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.bsdfs,THREE.ShaderChunk.lights_pars,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment].join("\n"));var s=[THREE.ShaderChunk.normal_flip,THREE.ShaderChunk.normal_fragment,"\tBlinnPhongMaterial material;",h.code,"\tvec3 diffuseColor = "+h.result+";","\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",THREE.ShaderChunk.logdepthbuf_fragment,o.code,"\tvec3 specular = "+o.result+";",n.code,"\tfloat shininess = max(0.0001,"+n.result+");","\tfloat specularStrength = 1.0;"];a&&s.push(a.code,"if ( "+a.result+" <= ALPHATEST ) discard;"),d&&(e.include("perturbNormal2Arb"),s.push(d.code),l&&s.push(l.code),s.push("normal = perturbNormal2Arb(-vViewPosition,normal,"+d.result+","+(new THREE.UVNode).build(e,"v2")+","+(l?l.result:"vec2( 1.0 )")+");")),s.push("material.diffuseColor = "+(u?"vec3( 1.0 )":"diffuseColor")+";"),s.push("material.specularColor = specular;","material.specularShininess = shininess;","material.specularStrength = specularStrength;",THREE.ShaderChunk.lights_template),u&&(s.push(u.code,"reflectedLight.directDiffuse = "+u.result+";"),s.push("reflectedLight.directDiffuse *= diffuseColor;","reflectedLight.indirectDiffuse *= diffuseColor;")),c&&s.push(c.code,"reflectedLight.indirectDiffuse *= "+c.result+";"),E&&s.push(E.code,"reflectedLight.indirectDiffuse += "+E.result+";"),p&&s.push(p.code,"reflectedLight.directDiffuse *= "+p.result+";","reflectedLight.directSpecular *= "+p.result+";"),m&&s.push(m.code,"reflectedLight.directDiffuse += "+m.result+";"),s.push("vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular;"),f&&(s.push(f.code),g?s.push(g.code,"outgoingLight = mix( outgoingLight, "+f.result+", "+g.result+" );"):s.push("outgoingLight = "+f.result+";")),a?s.push("gl_FragColor = vec4( outgoingLight, "+a.result+" );"):s.push("gl_FragColor = vec4( outgoingLight, 1.0 );"),s.push(THREE.ShaderChunk.premultiplied_alpha_fragment,THREE.ShaderChunk.tonemapping_fragment,THREE.ShaderChunk.encodings_fragment,THREE.ShaderChunk.fog_fragment),t=s.join("\n")}return t};