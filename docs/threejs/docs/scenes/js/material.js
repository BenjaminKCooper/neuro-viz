function getObjectsKeys(e){var a=[];for(var t in e)e.hasOwnProperty(t)&&a.push(t);return a}function generateVertexColors(e){for(var a=0,t=e.faces.length;a<t;a++)e.faces[a].vertexColors.push((new THREE.Color).setHSL(a/t*Math.random(),.5,.5)),e.faces[a].vertexColors.push((new THREE.Color).setHSL(a/t*Math.random(),.5,.5)),e.faces[a].vertexColors.push((new THREE.Color).setHSL(a/t*Math.random(),.5,.5)),e.faces[a].color=(new THREE.Color).setHSL(a/t*Math.random(),.5,.5)}function generateMorphTargets(e,a){for(var t,r=[],o=0;o<a.vertices.length;o++)r.push(a.vertices[o].clone()),t=1+.3*Math.random(),r[r.length-1].x*=t,r[r.length-1].y*=t,r[r.length-1].z*=t;a.morphTargets.push({name:"target1",vertices:r})}function handleColorChange(e){return function(a){"string"==typeof a&&(a=a.replace("#","0x")),e.setHex(a)}}function needsUpdate(e,a){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,a.verticesNeedUpdate=!0,a.normalsNeedUpdate=!0,a.colorsNeedUpdate=!0}}function updateMorphs(e,a){return function(){e.updateMorphTargets(),a.needsUpdate=!0}}function updateTexture(e,a,t){return function(r){e[a]=t[r],e.needsUpdate=!0}}function guiScene(e,a){var t=e.addFolder("Scene"),r={background:"#000000","ambient light":ambientLight.color.getHex()},o=new THREE.Color,n=handleColorChange(o);t.addColor(r,"background").onChange(function(e){n(e),renderer.setClearColor(o.getHex())}),t.addColor(r,"ambient light").onChange(handleColorChange(ambientLight.color)),guiSceneFog(t,a)}function guiSceneFog(e,a){var t=e.addFolder("scene.fog"),r=new THREE.Fog(4160413,0,60),o={fog:{"THREE.Fog()":!1,"scene.fog.color":r.color.getHex()}};t.add(o.fog,"THREE.Fog()").onChange(function(e){e?a.fog=r:a.fog=null}),t.addColor(o.fog,"scene.fog.color").onChange(handleColorChange(r.color))}function guiMaterial(e,a,t,r){var o=e.addFolder("THREE.Material");o.add(t,"transparent"),o.add(t,"opacity",0,1),o.add(t,"depthTest"),o.add(t,"depthWrite"),o.add(t,"alphaTest",0,1),o.add(t,"visible"),o.add(t,"side",constants.side).onChange(needsUpdate(t,r))}function guiMeshBasicMaterial(e,a,t,r){var o={color:t.color.getHex(),envMaps:envMapKeys,map:textureMapKeys,specularMap:textureMapKeys,alphaMap:textureMapKeys},n=e.addFolder("THREE.MeshBasicMaterial");n.addColor(o,"color").onChange(handleColorChange(t.color)),n.add(t,"wireframe"),n.add(t,"wireframeLinewidth",0,10),n.add(t,"shading",constants.shading),n.add(t,"vertexColors",constants.colors).onChange(needsUpdate(t,r)),n.add(t,"fog"),n.add(o,"envMaps",envMapKeys).onChange(updateTexture(t,"envMap",envMaps)),n.add(o,"map",textureMapKeys).onChange(updateTexture(t,"map",textureMaps)),n.add(o,"specularMap",textureMapKeys).onChange(updateTexture(t,"specularMap",textureMaps)),n.add(o,"alphaMap",textureMapKeys).onChange(updateTexture(t,"alphaMap",textureMaps)),n.add(t,"morphTargets").onChange(updateMorphs(a,t)),n.add(t,"combine",constants.combine).onChange(updateMorphs(a,t)),n.add(t,"reflectivity",0,1),n.add(t,"refractionRatio",0,1)}function guiMeshDepthMaterial(e,a,t,r){var o=e.addFolder("THREE.MeshDepthMaterial");o.add(t,"wireframe"),o.add(t,"wireframeLinewidth",0,10),o.add(t,"morphTargets").onChange(updateMorphs(a,t))}function guiMeshNormalMaterial(e,a,t,r){var o=e.addFolder("THREE.MeshNormalMaterial");o.add(t,"wireframe"),o.add(t,"wireframeLinewidth",0,10),o.add(t,"morphTargets").onChange(updateMorphs(a,t))}function guiLineBasicMaterial(e,a,t,r){var o={color:t.color.getHex()},n=e.addFolder("THREE.LineBasicMaterial");n.addColor(o,"color").onChange(handleColorChange(t.color)),n.add(t,"linewidth",0,10),n.add(t,"linecap",["butt","round","square"]),n.add(t,"linejoin",["round","bevel","miter"]),n.add(t,"vertexColors",constants.colors).onChange(needsUpdate(t,r)),n.add(t,"fog")}function guiMeshLambertMaterial(e,a,t,r){var o={color:t.color.getHex(),emissive:t.emissive.getHex(),envMaps:envMapKeys,map:textureMapKeys,specularMap:textureMapKeys,alphaMap:textureMapKeys},n=e.addFolder("THREE.MeshLambertMaterial");n.addColor(o,"color").onChange(handleColorChange(t.color)),n.addColor(o,"emissive").onChange(handleColorChange(t.emissive)),n.add(t,"wireframe"),n.add(t,"wireframeLinewidth",0,10),n.add(t,"vertexColors",constants.colors).onChange(needsUpdate(t,r)),n.add(t,"fog"),n.add(o,"envMaps",envMapKeys).onChange(updateTexture(t,"envMap",envMaps)),n.add(o,"map",textureMapKeys).onChange(updateTexture(t,"map",textureMaps)),n.add(o,"specularMap",textureMapKeys).onChange(updateTexture(t,"specularMap",textureMaps)),n.add(o,"alphaMap",textureMapKeys).onChange(updateTexture(t,"alphaMap",textureMaps)),n.add(t,"morphTargets").onChange(updateMorphs(a,t)),n.add(t,"combine",constants.combine).onChange(updateMorphs(a,t)),n.add(t,"reflectivity",0,1),n.add(t,"refractionRatio",0,1)}function guiMeshPhongMaterial(e,a,t,r){var o={color:t.color.getHex(),emissive:t.emissive.getHex(),specular:t.specular.getHex(),envMaps:envMapKeys,map:textureMapKeys,lightMap:textureMapKeys,specularMap:textureMapKeys,alphaMap:textureMapKeys},n=e.addFolder("THREE.MeshPhongMaterial");n.addColor(o,"color").onChange(handleColorChange(t.color)),n.addColor(o,"emissive").onChange(handleColorChange(t.emissive)),n.addColor(o,"specular").onChange(handleColorChange(t.specular)),n.add(t,"shininess",0,100),n.add(t,"shading",constants.shading).onChange(needsUpdate(t,r)),n.add(t,"wireframe"),n.add(t,"wireframeLinewidth",0,10),n.add(t,"vertexColors",constants.colors),n.add(t,"fog"),n.add(o,"envMaps",envMapKeys).onChange(updateTexture(t,"envMap",envMaps)),n.add(o,"map",textureMapKeys).onChange(updateTexture(t,"map",textureMaps)),n.add(o,"lightMap",textureMapKeys).onChange(updateTexture(t,"lightMap",textureMaps)),n.add(o,"specularMap",textureMapKeys).onChange(updateTexture(t,"specularMap",textureMaps)),n.add(o,"alphaMap",textureMapKeys).onChange(updateTexture(t,"alphaMap",textureMaps))}function guiMeshStandardMaterial(e,a,t,r){var o={color:t.color.getHex(),emissive:t.emissive.getHex(),envMaps:envMapKeys,map:textureMapKeys,lightMap:textureMapKeys,specularMap:textureMapKeys,alphaMap:textureMapKeys},n=e.addFolder("THREE.MeshStandardMaterial");n.addColor(o,"color").onChange(handleColorChange(t.color)),n.addColor(o,"emissive").onChange(handleColorChange(t.emissive)),n.add(t,"roughness",0,1),n.add(t,"metalness",0,1),n.add(t,"shading",constants.shading).onChange(needsUpdate(t,r)),n.add(t,"wireframe"),n.add(t,"wireframeLinewidth",0,10),n.add(t,"vertexColors",constants.colors),n.add(t,"fog"),n.add(o,"envMaps",envMapKeys).onChange(updateTexture(t,"envMap",envMaps)),n.add(o,"map",textureMapKeys).onChange(updateTexture(t,"map",textureMaps)),n.add(o,"lightMap",textureMapKeys).onChange(updateTexture(t,"lightMap",textureMaps)),n.add(o,"alphaMap",textureMapKeys).onChange(updateTexture(t,"alphaMap",textureMaps))}function chooseFromHash(e,a,t){var r,o=window.location.hash.substring(1)||"MeshBasicMaterial";switch(o){case"MeshBasicMaterial":return r=new THREE.MeshBasicMaterial({color:2200782}),guiMaterial(e,a,r,t),guiMeshBasicMaterial(e,a,r,t),r;case"MeshLambertMaterial":return r=new THREE.MeshLambertMaterial({color:2200782}),guiMaterial(e,a,r,t),guiMeshLambertMaterial(e,a,r,t),r;case"MeshPhongMaterial":return r=new THREE.MeshPhongMaterial({color:2200782}),guiMaterial(e,a,r,t),guiMeshPhongMaterial(e,a,r,t),r;case"MeshStandardMaterial":return r=new THREE.MeshStandardMaterial({color:2200782}),guiMaterial(e,a,r,t),guiMeshStandardMaterial(e,a,r,t),r;case"MeshDepthMaterial":return r=new THREE.MeshDepthMaterial({color:2200782}),guiMaterial(e,a,r,t),guiMeshDepthMaterial(e,a,r,t),r;case"MeshNormalMaterial":return r=new THREE.MeshNormalMaterial,guiMaterial(e,a,r,t),guiMeshNormalMaterial(e,a,r,t),r;case"LineBasicMaterial":return r=new THREE.LineBasicMaterial({color:2200782}),guiMaterial(e,a,r,t),guiLineBasicMaterial(e,a,r,t),r}}var constants={combine:{"THREE.MultiplyOperation":THREE.MultiplyOperation,"THREE.MixOperation":THREE.MixOperation,"THREE.AddOperation":THREE.AddOperation},side:{"THREE.FrontSide":THREE.FrontSide,"THREE.BackSide":THREE.BackSide,"THREE.DoubleSide":THREE.DoubleSide},shading:{"THREE.FlatShading":THREE.FlatShading,"THREE.SmoothShading":THREE.SmoothShading},colors:{"THREE.NoColors":THREE.NoColors,"THREE.FaceColors":THREE.FaceColors,"THREE.VertexColors":THREE.VertexColors},blendingMode:{"THREE.NoBlending":THREE.NoBlending,"THREE.NormalBlending":THREE.NormalBlending,"THREE.AdditiveBlending":THREE.AdditiveBlending,"THREE.SubtractiveBlending":THREE.SubtractiveBlending,"THREE.MultiplyBlending":THREE.MultiplyBlending,"THREE.CustomBlending":THREE.CustomBlending},equations:{"THREE.AddEquation":THREE.AddEquation,"THREE.SubtractEquation":THREE.SubtractEquation,"THREE.ReverseSubtractEquation":THREE.ReverseSubtractEquation},destinationFactors:{"THREE.ZeroFactor":THREE.ZeroFactor,"THREE.OneFactor":THREE.OneFactor,"THREE.SrcColorFactor":THREE.SrcColorFactor,"THREE.OneMinusSrcColorFactor":THREE.OneMinusSrcColorFactor,"THREE.SrcAlphaFactor":THREE.SrcAlphaFactor,"THREE.OneMinusSrcAlphaFactor":THREE.OneMinusSrcAlphaFactor,"THREE.DstAlphaFactor":THREE.DstAlphaFactor,"THREE.OneMinusDstAlphaFactor":THREE.OneMinusDstAlphaFactor},sourceFactors:{"THREE.DstColorFactor":THREE.DstColorFactor,"THREE.OneMinusDstColorFactor":THREE.OneMinusDstColorFactor,"THREE.SrcAlphaSaturateFactor":THREE.SrcAlphaSaturateFactor}},envMaps=function(){var e="../../examples/textures/cube/SwedishRoyalCastle/",a=".jpg",t=[e+"px"+a,e+"nx"+a,e+"py"+a,e+"ny"+a,e+"pz"+a,e+"nz"+a],r=(new THREE.CubeTextureLoader).load(t);r.format=THREE.RGBFormat;var o=(new THREE.CubeTextureLoader).load(t);return o.mapping=THREE.CubeRefractionMapping,o.format=THREE.RGBFormat,{none:null,reflection:r,refraction:o}}(),envMapKeys=getObjectsKeys(envMaps),textureMaps=function(){return{none:null,grass:(new THREE.TextureLoader).load("../../examples/textures/terrain/grasslight-thin.jpg")}}(),textureMapKeys=getObjectsKeys(textureMaps);